{"version":3,"sources":["types/index.ts","state/color-brewer/actions.ts","components/footer/index.tsx","state/global/actions.ts","state/color-brewer/reducer.ts","state/color-brewer/context.ts","state/lantana/actions.ts","state/global/reducer.ts","state/global/context.ts","state/global/selectors.ts","state/cubehelix/actions.ts","state/lantana/reducer.ts","state/lantana/context.ts","state/lantana/selectors.ts","state/cubehelix/selectors.ts","state/color-brewer/selectors.ts","state/cubehelix/reducer.ts","state/cubehelix/context.ts","hooks/use-palette-colors.ts","components/radio-input/index.tsx","components/tab-link/index.tsx","components/logo/index.tsx","components/button/index.tsx","components/card/index.tsx","components/card-content/index.tsx","components/card-title/index.tsx","components/header/index.tsx","components/color-stack/index.tsx","utils/number.ts","components/input/index.tsx","components/number-input/index.tsx","utils/color-brewer-groups.ts","settings/ColorBrewer.tsx","utils/color.ts","components/range-input/index.tsx","components/large-control/index.tsx","components/color-picker/index.tsx","settings/Lantana.tsx","components/palette-color/index.tsx","components/palette/index.tsx","settings/Cubehelix.tsx","App.tsx","index.tsx"],"names":["SettingsName","ActionType","Footer","className","initialState","name","ColorBrewer","paletteSize","groupName","paletteName","colorBrewerReducer","state","action","type","SetPaletteSize","payload","SetGroupName","SetPaletteName","ColorBrewerContext","React","createContext","colorBrewerState","dispatch","currentSettings","Lantana","globalReducer","SetCurrentSettings","GlobalContext","globalState","selectCurrentSettings","initialFirstColor","chroma","hsl","initialSecondColor","colorPickers","id","nanoid","color","palette","mode","size","gamma","lantanaReducer","AddColorPicker","UpdateColorPicker","map","picker","DeleteColorPicker","filter","SetPalette","SetPaletteMode","SetGamma","LantanaContext","lantanaState","selectPaletteSize","selectPaletteMode","selectGamma","selectColorsFromColorPickers","selectStart","start","selectRotations","rotations","selectDark","dark","selectLight","light","paletteColorsScale","cubehelix","lightness","scale","selectGroupName","selectPaletteName","Cubehelix","hue","cubehelixReducer","SetStart","SetRotations","SetHue","SetDark","SetLight","CubehelixContext","cubehelixState","usePaletteColors","useContext","colors","selectColorBrewerColors","selectCubehelixColors","Radio","props","children","value","restProps","clsx","htmlFor","TabLink","settings","checked","onChange","e","target","setCurrentSettings","LantanaLogo","index","style","hex","length","Button","materialIconName","label","Card","CardContent","CardTitle","title","Header","paletteColors","onClick","copy","JSON","stringify","toString","ColorStack","backgroundColor","toPrecision","precision","scaleFactor","Math","round","Input","NumberInput","large","min","max","step","onChangeValue","useState","inputValue","setInputValue","focus","setFocus","useEffect","setParsedValue","parsedValue","isNaN","parseFloat","onBlur","onFocus","onWheel","newValue","deltaY","colorBrewerGroups","handleChangeGroupName","setGroupName","handleChangePaletteName","setPaletteName","setPaletteSize","colorToPercentageHsl","h","s","l","percentageHslToColor","isLightColor","threshold","luminance","RangeInput","LargeControl","minValue","maxValue","ColorPicker","onChangeColor","substring","setHex","setHue","saturation","setSaturation","setLightness","replace","test","isValidHex","newColor","newHue","newSaturation","newLightness","pickers","handleChangeColor","colorPicker","handleChangePaletteMode","setPaletteMode","setGamma","PaletteColor","toUpperCase","isCopied","setIsCopied","onAnimationEnd","Palette","setStart","setRotations","setDark","setLight","App","useReducer","lantanaInitialState","lantanaDispatch","colorBrewerInitialState","colorBrewerDispatch","cubehelixInitialState","cubehelixDispatch","globalInitialState","globalDispatch","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d5be95d.chunk.js","sourcesContent":["import { brewer, Color, InterpolationMode } from 'chroma-js'\n\nexport interface Picker {\n    id: string\n    color: Color\n}\n\nexport interface Palette {\n    size: number\n    mode: InterpolationMode\n    gamma: number\n}\n\nexport interface SettingsState {\n    name: SettingsName\n}\n\nexport interface LantanaState extends SettingsState {\n    name: SettingsName.Lantana\n    colorPickers: Picker[]\n    palette: Palette\n}\n\nexport interface ColorBrewerState extends SettingsState {\n    name: SettingsName.ColorBrewer\n    paletteSize: number\n    groupName: ColorBrewerGroupName\n    paletteName: keyof typeof brewer\n}\n\nexport interface CubehelixState extends SettingsState {\n    name: SettingsName.Cubehelix\n    paletteSize: number\n    start: number\n    rotations: number\n    hue: number\n    gamma: number\n    dark: number\n    light: number\n}\n\nexport interface GlobalState {\n    currentSettings: SettingsName\n}\n\nexport enum SettingsName {\n    Lantana = 'lantana',\n    ColorBrewer = 'colorbrewer',\n    Cubehelix = 'cubehelix'\n}\n\nexport type ColorBrewerGroupName = 'diverging' | 'qualitative' | 'sequential'\n","import { brewer } from 'chroma-js'\nimport { ColorBrewerGroupName } from '../../types'\n\nexport enum ActionType {\n    SetPaletteSize,\n    SetGroupName,\n    SetPaletteName\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport interface SetGroupName {\n    type: ActionType.SetGroupName,\n    payload: ColorBrewerGroupName\n} \n\nexport interface SetPaletteName {\n    type: ActionType.SetPaletteName,\n    payload: keyof typeof brewer\n} \n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\nexport const setGroupName = (groupName: ColorBrewerGroupName): SetGroupName => ({\n    type: ActionType.SetGroupName,\n    payload: groupName\n})\n\nexport const setPaletteName = (paletteName: keyof typeof brewer): SetPaletteName => ({\n    type: ActionType.SetPaletteName,\n    payload: paletteName\n})\n\nexport type Actions = SetPaletteSize | SetGroupName | SetPaletteName\n","import { FC } from 'react'\nimport './footer.css'\n\nconst Footer: FC = () => {\n    return (\n        <footer className='footer'>\n\n        </footer>\n    )\n}\n\nexport default Footer\n","import { SettingsName } from '../../types'\n\nexport enum ActionType {\n    SetCurrentSettings\n}\n\nexport interface SetCurrentSettings {\n    type: ActionType.SetCurrentSettings,\n    payload: SettingsName\n}\n\nexport const setCurrentSettings= (settings: SettingsName): SetCurrentSettings => ({\n    type: ActionType.SetCurrentSettings,\n    payload: settings\n})\n\nexport type Actions = SetCurrentSettings\n","import { ColorBrewerState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialPaletteSize = 9\nconst initialGroupName = 'sequential'\nconst initialPaletteName = 'PuRd'\n\nexport const initialState: ColorBrewerState = {\n    name: SettingsName.ColorBrewer,\n    paletteSize: initialPaletteSize,\n    groupName: initialGroupName,\n    paletteName: initialPaletteName\n}\n\nexport const colorBrewerReducer = (state: ColorBrewerState, action: Actions): ColorBrewerState => {\n    switch (action.type) {\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                paletteSize: action.payload\n            }\n        case ActionType.SetGroupName:\n            return {\n                ...state,\n                groupName: action.payload\n            }\n        case ActionType.SetPaletteName:\n            return {\n                ...state,\n                paletteName: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { ColorBrewerState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const ColorBrewerContext = React.createContext<{\n    colorBrewerState: ColorBrewerState\n    dispatch: React.Dispatch<Actions>\n}>({\n    colorBrewerState: initialState,\n    dispatch: () => undefined\n})","import { InterpolationMode } from 'chroma-js'\nimport { Picker, Palette } from '../../types'\n\nexport enum ActionType {\n    AddColorPicker,\n    UpdateColorPicker,\n    DeleteColorPicker,\n    SetPalette,\n    SetPaletteMode,\n    SetPaletteSize,\n    SetGamma\n}\n\nexport interface AddColorPicker {\n    type: ActionType.AddColorPicker,\n    payload: Picker\n}\n\nexport interface UpdateColorPicker {\n    type: ActionType.UpdateColorPicker,\n    payload: Picker\n}\n\nexport interface DeleteColorPicker {\n    type: ActionType.DeleteColorPicker,\n    payload: string\n}\n\nexport interface SetPalette {\n    type: ActionType.SetPalette,\n    payload: Palette\n}\n\nexport interface SetPaletteMode {\n    type: ActionType.SetPaletteMode,\n    payload: InterpolationMode\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport interface SetGamma {\n    type: ActionType.SetGamma,\n    payload: number\n}\n\nexport const addColorPicker = (colorPicker: Picker): AddColorPicker => ({\n    type: ActionType.AddColorPicker,\n    payload: colorPicker\n})\n\nexport const updateColorPicker = (colorPicker: Picker): UpdateColorPicker => ({\n    type: ActionType.UpdateColorPicker,\n    payload: colorPicker\n})\n\nexport const deleteColorPicker = (id: string): DeleteColorPicker => ({\n    type: ActionType.DeleteColorPicker,\n    payload: id\n})\n\nexport const setPalette = (palette: Palette): SetPalette => ({\n    type: ActionType.SetPalette,\n    payload: palette\n})\n\nexport const setPaletteMode = (mode: InterpolationMode): SetPaletteMode => ({\n    type: ActionType.SetPaletteMode,\n    payload: mode\n})\n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\nexport const setGamma = (gamma: number): SetGamma => ({\n    type: ActionType.SetGamma,\n    payload: gamma\n})\n\n\nexport type Actions = AddColorPicker\n    | UpdateColorPicker\n    | DeleteColorPicker\n    | SetPalette\n    | SetPaletteMode\n    | SetPaletteSize\n    | SetGamma\n","import { GlobalState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialCurrentSettings = SettingsName.Lantana\n\nexport const initialState: GlobalState = {\n    currentSettings: initialCurrentSettings\n}\n\nexport const globalReducer = (state: GlobalState, action: Actions): GlobalState => {\n    switch (action.type) {\n        case ActionType.SetCurrentSettings:\n            return {\n                ...state,\n                currentSettings: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { GlobalState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const GlobalContext = React.createContext<{\n    globalState: GlobalState\n    dispatch: React.Dispatch<Actions>\n}>({\n    globalState: initialState,\n    dispatch: () => undefined\n})","import { GlobalState, SettingsName } from '../../types'\n\nexport const selectCurrentSettings = (state: GlobalState): SettingsName => state.currentSettings\n","export enum ActionType {\n    SetStart,\n    SetRotations,\n    SetHue,\n    SetGamma,\n    SetDark,\n    SetLight,\n    SetPaletteSize\n}\n\nexport interface SetStart {\n    type: ActionType.SetStart,\n    payload: number\n}\n\nexport interface SetRotations {\n    type: ActionType.SetRotations,\n    payload: number\n}\n\nexport interface SetHue {\n    type: ActionType.SetHue,\n    payload: number\n}\n\nexport interface SetGamma {\n    type: ActionType.SetGamma,\n    payload: number\n}\n\nexport interface SetDark {\n    type: ActionType.SetDark,\n    payload: number\n}\n\nexport interface SetLight {\n    type: ActionType.SetLight,\n    payload: number\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport const setStart = (start: number): SetStart => ({\n    type: ActionType.SetStart,\n    payload: start\n})\n\nexport const setRotations = (rotations: number): SetRotations => ({\n    type: ActionType.SetRotations,\n    payload: rotations\n})\n\nexport const setHue = (hue: number): SetHue => ({\n    type: ActionType.SetHue,\n    payload: hue\n})\n\nexport const setGamma = (gamma: number): SetGamma => ({\n    type: ActionType.SetGamma,\n    payload: gamma\n})\n\nexport const setDark = (dark: number): SetDark => ({\n    type: ActionType.SetDark,\n    payload: dark\n})\n\nexport const setLight = (light: number): SetLight => ({\n    type: ActionType.SetLight,\n    payload: light\n})\n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\n\nexport type Actions = SetStart\n    | SetRotations\n    | SetHue\n    | SetGamma\n    | SetDark\n    | SetLight\n    | SetPaletteSize\n","import chroma from 'chroma-js'\nimport { nanoid } from 'nanoid'\nimport { LantanaState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialFirstColor = chroma.hsl(358, 1, 0.92)\nconst initialSecondColor = chroma.hsl(238, 1, 0.10)\nconst initialPaletteSize = 9\nconst initialPaletteMode = 'hsi'\nconst initialGamma = 1\n\n\nexport const initialState: LantanaState = {\n    name: SettingsName.Lantana,\n    colorPickers: [\n        {\n            id: nanoid(),\n            color: initialFirstColor\n        },\n        {\n            id: nanoid(),\n            color: initialSecondColor\n        },\n    ],\n    palette: {\n        mode: initialPaletteMode,\n        size: initialPaletteSize,\n        gamma: initialGamma\n    }\n}\n\nexport const lantanaReducer = (state: LantanaState, action: Actions): LantanaState => {\n    switch (action.type) {\n        case ActionType.AddColorPicker:\n            return {\n                ...state,\n                colorPickers: [...state.colorPickers, action.payload]\n            }\n        case ActionType.UpdateColorPicker:\n            return {\n                ...state,\n                colorPickers: state.colorPickers.map(picker =>\n                    picker.id === action.payload.id ? { ...picker, ...action.payload } : picker\n                )\n            }\n        case ActionType.DeleteColorPicker:\n            return {\n                ...state,\n                colorPickers: state.colorPickers.filter(picker => picker.id !== action.payload)\n            }\n        case ActionType.SetPalette:\n            return {\n                ...state,\n                palette: action.payload\n            }\n        case ActionType.SetPaletteMode:\n            return {\n                ...state,\n                palette: { ...state.palette, mode: action.payload }\n            }\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                palette: { ...state.palette, size: action.payload }\n            }\n        case ActionType.SetGamma:\n            return {\n                ...state,\n                palette: { ...state.palette, gamma: action.payload }\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { LantanaState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const LantanaContext = React.createContext<{\n    lantanaState: LantanaState\n    dispatch: React.Dispatch<Actions>\n}>({\n    lantanaState: initialState,\n    dispatch: () => undefined\n})","import chroma, { Color, InterpolationMode } from 'chroma-js'\nimport { LantanaState, Palette, Picker } from '../../types'\n\n\nexport const selectPalette = (state: LantanaState): Palette => state.palette\nexport const selectPaletteSize = (state: LantanaState): number => state.palette.size\nexport const selectPaletteMode = (state: LantanaState): InterpolationMode => state.palette.mode\nexport const selectGamma = (state: LantanaState): number => state.palette.gamma\n\nexport const selectColorPickers = (state: LantanaState): Picker[] => state.colorPickers\n\nexport const selectColorsFromColorPickers = (state: LantanaState): Color[] => state.colorPickers.map(picker => picker.color)\n\nexport const selectPaletteColors = (state: LantanaState): Color[] => {\n    return chroma\n        .scale(selectColorsFromColorPickers(state))\n        .mode(selectPaletteMode(state))\n        .gamma(selectGamma(state))\n        .colors(selectPaletteSize(state), null)\n}\n","import chroma, { Color, Scale } from 'chroma-js'\nimport { CubehelixState } from '../../types'\n\nexport const selectStart = (state: CubehelixState): number => state.start\nexport const selectRotations = (state: CubehelixState): number => state.rotations\nexport const selectHue = (state: CubehelixState): number => state.hue\nexport const selectGamma = (state: CubehelixState): number => state.gamma\nexport const selectDark = (state: CubehelixState): number => state.dark\nexport const selectLight = (state: CubehelixState): number => state.light\nexport const selectPaletteSize = (state: CubehelixState): number => state.paletteSize\n\nconst paletteColorsScale = (state: CubehelixState): Scale => {\n    return chroma\n        .cubehelix()\n        .start(selectStart(state))\n        .rotations(selectRotations(state))\n        .gamma(selectGamma(state))\n        .lightness([selectDark(state), selectLight(state)])\n        .scale()\n}\n\nexport const selectPaletteColors = (state: CubehelixState): Color[] => {\n    return paletteColorsScale(state).colors(selectPaletteSize(state), null)\n}\n\nexport const selectLogoColors = (state: CubehelixState): Color[] => {\n    return paletteColorsScale(state).colors(2, null)\n}\n","import chroma, { brewer, Color } from 'chroma-js'\nimport { ColorBrewerGroupName, ColorBrewerState } from '../../types'\n\nexport const selectPaletteSize = (state: ColorBrewerState): number => state.paletteSize\nexport const selectGroupName = (state: ColorBrewerState): ColorBrewerGroupName => state.groupName\nexport const selectPaletteName = (state: ColorBrewerState): keyof typeof brewer => state.paletteName\n\nexport const selectPaletteColors = (state: ColorBrewerState): Color[] => {\n    return chroma\n        .scale(selectPaletteName(state))\n        .colors(selectPaletteSize(state), null)\n}\n","import { CubehelixState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialStart = 300\nconst initialRotations = -0.4\nconst initialHue = 1\nconst initialGamma = 1\nconst initialDark = 0.1\nconst initialLight = 0.9\nconst initialPaletteSize = 9\n\nexport const initialState: CubehelixState = {\n    name: SettingsName.Cubehelix,\n    paletteSize: initialPaletteSize,\n    start: initialStart,\n    rotations: initialRotations,\n    hue: initialHue,\n    gamma: initialGamma,\n    dark: initialDark,\n    light: initialLight\n}\n\nexport const cubehelixReducer = (state: CubehelixState, action: Actions): CubehelixState => {\n    switch (action.type) {\n        case ActionType.SetStart:\n            return {\n                ...state,\n                start: action.payload\n            }\n        case ActionType.SetRotations:\n            return {\n                ...state,\n                rotations: action.payload\n            }\n        case ActionType.SetHue:\n            return {\n                ...state,\n                hue: action.payload\n            }\n        case ActionType.SetGamma:\n            return {\n                ...state,\n                gamma: action.payload\n            }\n        case ActionType.SetDark:\n            return {\n                ...state,\n                dark: action.payload\n            }\n        case ActionType.SetLight:\n            return {\n                ...state,\n                light: action.payload\n            }\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                paletteSize: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { CubehelixState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const CubehelixContext = React.createContext<{\n    cubehelixState: CubehelixState\n    dispatch: React.Dispatch<Actions>\n}>({\n    cubehelixState: initialState,\n    dispatch: () => undefined\n})\n","import { useContext } from 'react'\nimport { ColorBrewerContext } from '../state/color-brewer/context'\nimport { GlobalContext } from '../state/global/context'\nimport { selectCurrentSettings } from '../state/global/selectors'\nimport { LantanaContext } from '../state/lantana/context'\nimport { SettingsName } from '../types'\nimport { selectPaletteColors as selectLantanaColors } from '../state/lantana/selectors'\nimport { selectPaletteColors as selectCubehelixColors } from '../state/cubehelix/selectors'\nimport { selectPaletteColors as selectColorBrewerColors } from '../state/color-brewer/selectors'\nimport { CubehelixContext } from '../state/cubehelix/context'\n\nexport const usePaletteColors = () => {\n    const { globalState } = useContext(GlobalContext)\n    const { lantanaState } = useContext(LantanaContext)\n    const { cubehelixState } = useContext(CubehelixContext)\n    const { colorBrewerState } = useContext(ColorBrewerContext)\n\n    switch (selectCurrentSettings(globalState)) {\n        case SettingsName.Lantana:\n            return selectLantanaColors(lantanaState)\n        case SettingsName.ColorBrewer:\n            return selectColorBrewerColors(colorBrewerState)\n        case SettingsName.Cubehelix:\n            return selectCubehelixColors(cubehelixState)\n        default:\n            return []\n    }\n}\n","import clsx from 'clsx'\nimport React, { FC, InputHTMLAttributes } from 'react'\nimport './radio-input.css'\n\nexport interface RadioProps extends InputHTMLAttributes<HTMLInputElement> {\n    children?: React.ReactNode | string\n}\n\nconst Radio: FC<RadioProps> = (props: RadioProps) => {\n    const { className, id, children, value, ...restProps } = props\n\n    return (\n        <>\n            <input\n                {...restProps}\n                id={id}\n                type='radio'\n                value={value}\n                className={clsx('radio-input')}\n            />\n            <label\n                htmlFor={id}\n                className={clsx('radio-label', className)}\n            >\n                {children ? children : value}\n            </label>\n        </>\n    )\n}\n\nexport default Radio\n","import React, { ChangeEvent, FC, useContext } from 'react'\nimport { setCurrentSettings } from '../../state/global/actions'\nimport { GlobalContext } from '../../state/global/context'\nimport { selectCurrentSettings } from '../../state/global/selectors'\nimport { SettingsName } from '../../types'\nimport Radio from '../radio-input'\nimport './tab-link.css'\n\nexport interface TabLinkProps {\n    settings: SettingsName\n    children: React.ReactNode\n}\n\nconst TabLink: FC<TabLinkProps> = (props: TabLinkProps) => {\n    const { settings, children } = props\n\n    const { globalState, dispatch } = useContext(GlobalContext)\n    const checked = selectCurrentSettings(globalState) === settings\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const settings = e.target.value\n\n        dispatch(setCurrentSettings(settings as SettingsName))\n    }\n\n    return (\n        <Radio\n            id={settings}\n            className='tab-link'\n            value={settings}\n            checked={checked}\n            onChange={handleChange}\n        >\n            {children}\n        </Radio>\n    )\n}\n\nexport default TabLink\n","import { FC, useContext } from 'react'\nimport { LantanaContext } from '../../state/lantana/context'\nimport { selectColorsFromColorPickers } from '../../state/lantana/selectors'\nimport './logo.css'\n\nconst LantanaLogo: FC = () => {\n    const { lantanaState } = useContext(LantanaContext)\n\n    const colors = selectColorsFromColorPickers(lantanaState)\n\n    return (\n        <>\n            <span className='logo'>lantana</span>\n\n            {colors.map((color, index) =>\n                <div key={index} className='flex items-center'>\n                    <span\n                        className='logo'\n                        style={{ color: color.hex() }}\n                    >\n                        •\n                    </span>\n                    {index + 1 !== colors.length &&\n                        <span className='logo'>\n                            {'->'}\n                        </span>\n                    }\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default LantanaLogo","import clsx from 'clsx'\nimport { ButtonHTMLAttributes, FC } from 'react'\nimport './button.css'\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    materialIconName?: string\n    label?: string\n}\n\nconst Button: FC<ButtonProps> = (props) => {\n    const { materialIconName, label, className, ...restProps } = props\n\n    return (\n        <button\n            {...restProps}\n            className={clsx('button', className, (materialIconName && !label) && 'button--action')}\n        >\n            {materialIconName &&\n                <span className='button__icon material-icons material-icons-round'>\n                    {materialIconName}\n                </span>\n            }\n            {label &&\n                <span>\n                    {label}\n                </span>\n            }\n        </button>\n    )\n}\n\nexport default Button","import clsx from 'clsx'\nimport React, { FC } from 'react'\nimport './card.css'\n\nexport interface CardProps {\n    className?: string\n    children: React.ReactNode\n}\n\nconst Card: FC<CardProps> = (props: CardProps) => {\n    const { className, children } = props\n\n    return (\n        <div className={clsx('card', className)}>\n            {children}\n        </div>\n    )\n}\n\nexport default Card\n","import clsx from 'clsx'\nimport { FC, ReactNode } from 'react'\nimport './card-content.css'\n\nexport interface CardContentProps {\n    className?: string\n    children?: ReactNode\n}\n\nconst CardContent: FC<CardContentProps> = (props) => {\n    const { children, className } = props\n\n    return (\n        <div className={clsx('card-content', className)}>\n            {children}\n        </div>\n    )\n}\n\nexport default CardContent\n","import clsx from 'clsx'\nimport { FC } from 'react'\nimport './card-title.css'\n\nexport interface CardTitleProps {\n    className?: string\n    title: string\n}\n\nconst CardTitle: FC<CardTitleProps> = (props) => {\n    const { title, className } = props\n\n    return (\n        <label className={clsx('card-title', className)}>\n            {title}\n        </label>\n    )\n}\n\nexport default CardTitle\n","import { FC } from 'react'\nimport copy from 'copy-to-clipboard'\nimport { usePaletteColors } from '../../hooks/use-palette-colors'\nimport { SettingsName } from '../../types'\nimport TabLink from '../tab-link'\nimport LantanaLogo from '../logo'\nimport Button from '../button'\nimport './header.css'\nimport Card from '../card'\nimport CardContent from '../card-content'\nimport CardTitle from '../card-title'\n\nconst Header: FC = () => {\n    const paletteColors = usePaletteColors()\n\n    const handleClickCopyJsonArray = () => {\n        copy(JSON.stringify(paletteColors.map(color => color.hex())))\n    }\n\n    const handleClickCopyCssGradient = () => {\n        copy(`linear-gradient(to right, ${paletteColors.toString()})`)\n    }\n\n    return (\n        <header className='header'>\n            <div className='header__tabs'>\n                <TabLink settings={SettingsName.Lantana}>\n                    <LantanaLogo />\n                </TabLink>\n\n                <TabLink settings={SettingsName.Cubehelix}>\n                    {SettingsName.Cubehelix}\n                </TabLink>\n\n                <TabLink settings={SettingsName.ColorBrewer}>\n                    {SettingsName.ColorBrewer}\n                </TabLink>\n            </div>\n\n            <Card className='header__actions'>\n                <CardTitle title='actions' />\n                <CardContent className='header__actions-buttons'>\n                    <Button materialIconName='data_array' label='array' onClick={handleClickCopyJsonArray} />\n                    <Button materialIconName='gradient' label='css gradient' onClick={handleClickCopyCssGradient} />\n                </CardContent>\n            </Card>\n        </header>\n    )\n}\n\nexport default Header\n","import { Color } from 'chroma-js'\nimport { FC } from 'react'\nimport './color-stack.css'\n\nexport interface ColorStackProps {\n    colors: Color[]\n}\n\nconst ColorStack: FC<ColorStackProps> = (props: ColorStackProps) => {\n    const { colors } = props\n\n    return (\n        <div className='color-stack'>\n            {colors.map((color) =>\n                <div\n                    key={color.hex()}\n                    className='color-stack__circle'\n                    style={{ backgroundColor: color.hex() }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ColorStack\n","export const toPrecision = (value: number, precision: number) => {\n    const scaleFactor = 10 ** precision\n    \n    return Math.round(value * scaleFactor) / scaleFactor\n}","import clsx from 'clsx'\nimport { FC, InputHTMLAttributes } from 'react'\nimport './input.css'\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n\n}\n\nconst Input: FC<InputProps> = (props) => {\n    const { className, ...restProps } = props\n    \n    return (\n        <input {...restProps} className={clsx('input', className)} />\n    )\n}\n\nexport default Input\n","import clsx from 'clsx'\nimport { ChangeEvent, FC, InputHTMLAttributes, useEffect, useState, WheelEvent } from 'react'\nimport { toPrecision } from '../../utils/number'\nimport Input from '../input'\nimport './number-input.css'\n\nexport interface NumberInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    large?: boolean\n    value: number\n    min: number\n    max: number\n    step: number\n    precision: number\n    onChangeValue: (value: number) => void\n}\n\nconst NumberInput: FC<NumberInputProps> = (props: NumberInputProps) => {\n    const { className, large = false, value, min, max, step, precision, onChangeValue, ...restProps } = props\n\n    const [inputValue, setInputValue] = useState<string>(value.toString())\n    const [focus, setFocus] = useState<boolean>(false)\n\n    useEffect(() => {\n        setInputValue(value.toString())\n    }, [value])\n\n    const setParsedValue = (parsedValue: number) => {\n        if (!isNaN(parsedValue)) {\n            parsedValue = toPrecision(parsedValue, precision)\n            \n            if (parsedValue > max) {\n                onChangeValue(max)\n            }\n\n            if (parsedValue < min) {\n                onChangeValue(min)\n            }\n\n            if (parsedValue >= min && parsedValue <= max) {\n                onChangeValue(parsedValue)\n            }\n        } else {\n            setInputValue('')\n        }\n    }\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        setParsedValue(parsedValue)\n    }\n\n    const handleWheel = (e: WheelEvent<HTMLInputElement>) => {\n        if (focus) {\n            const newValue = e.deltaY > 0 ? value + step : value - step\n\n            setParsedValue(toPrecision(newValue, precision))\n        }\n    }\n\n    const handleBlur = () => {\n        setFocus(false)\n\n        const parsedValue = parseFloat(inputValue)\n\n        if (isNaN(parsedValue)) {\n            setInputValue(value.toString())\n        }\n    }\n\n    const handleFocus = () => {\n        setFocus(true)\n    }\n\n\n    return (\n        <Input\n            {...restProps}\n            className={clsx('number-input', large && 'number-input--lg', className)}\n            type='number'\n            min={min}\n            max={max}\n            step={step}\n            size={1}\n            value={inputValue}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            onFocus={handleFocus}\n            onWheel={handleWheel}\n        />\n    )\n}\n\nexport default NumberInput\n","import { brewer } from 'chroma-js'\n\nexport const colorBrewerGroups = {\n    'diverging': [\n        'Spectral',\n        'RdYlGn',\n        'RdBu',\n        'PiYG',\n        'PRGn',\n        'RdYlBu',\n        'BrBG',\n        'RdGy',\n        'PuOr'\n    ] as Array<keyof typeof brewer>,\n    'qualitative': [\n        'Set2',\n        'Accent',\n        'Set1',\n        'Set3',\n        'Dark2',\n        'Paired',\n        'Pastel2',\n        'Pastel1',\n    ] as Array<keyof typeof brewer>,\n    'sequential': [\n        'OrRd',\n        'PuBu',\n        'BuPu',\n        'Oranges',\n        'BuGn',\n        'YlOrBr',\n        'YlGn',\n        'Reds',\n        'RdPu',\n        'Greens',\n        'YlGnBu',\n        'Purples',\n        'GnBu',\n        'Greys',\n        'YlOrRd',\n        'PuRd',\n        'Blues',\n        'PuBuGn',\n    ] as Array<keyof typeof brewer>\n}","import chroma from 'chroma-js'\nimport { brewer } from 'chroma-js'\nimport { ChangeEvent, FC, useContext } from 'react'\nimport Card from '../components/card'\nimport CardContent from '../components/card-content'\nimport CardTitle from '../components/card-title'\nimport ColorStack from '../components/color-stack'\nimport NumberInput from '../components/number-input'\nimport Radio from '../components/radio-input'\nimport { setGroupName, setPaletteName, setPaletteSize } from '../state/color-brewer/actions'\nimport { ColorBrewerContext } from '../state/color-brewer/context'\nimport { selectGroupName, selectPaletteName, selectPaletteSize } from '../state/color-brewer/selectors'\nimport { ColorBrewerGroupName } from '../types'\nimport { colorBrewerGroups } from '../utils/color-brewer-groups'\n\nconst ColorBrewer: FC = () => {\n    const { colorBrewerState, dispatch } = useContext(ColorBrewerContext)\n\n    const groupNames: Array<ColorBrewerGroupName> = ['sequential', 'diverging', 'qualitative']\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangeGroupName = (e: ChangeEvent<HTMLInputElement>) => {\n        const groupName = e.target.value\n\n        dispatch(setGroupName(groupName as ColorBrewerGroupName))\n    }\n\n\n    const handleChangePaletteName = (e: ChangeEvent<HTMLInputElement>) => {\n        const paletteName = e.target.value\n\n        dispatch(setPaletteName(paletteName as keyof typeof brewer))\n    }\n\n    return (\n        <div className='grid md:grid-cols-7 gap-4'>\n            <div className='grid sm:grid-cols-5 md:grid-cols-1 md:col-span-3 gap-4'>\n                <Card className='sm:col-span-3 md:col-span-1'>\n                    <CardTitle title='nature of data' />\n                    <CardContent>\n                        {groupNames.map(groupName =>\n                            <Radio\n                                key={groupName}\n                                id={groupName}\n                                value={groupName}\n                                checked={selectGroupName(colorBrewerState) === groupName}\n                                onChange={handleChangeGroupName}\n                            >\n                                {groupName}\n                            </Radio>\n                        )}\n                    </CardContent>\n                </Card>\n\n                <Card className='sm:col-span-2 md:col-span-1'>\n                    <CardTitle title='number of colors' />\n                    <CardContent>\n                        <NumberInput\n                            large\n                            value={selectPaletteSize(colorBrewerState)}\n                            min={0}\n                            max={30}\n                            step={1}\n                            precision={0}\n                            onChangeValue={handleChangePaletteSize}\n                        />\n                    </CardContent>\n                </Card>\n            </div>\n\n            <Card className='md:col-span-4'>\n                <CardTitle title='color scheme' />\n                <CardContent>\n                    {colorBrewerGroups[selectGroupName(colorBrewerState)].map(paletteName =>\n                        <Radio\n                            key={paletteName}\n                            id={paletteName}\n                            value={paletteName}\n                            checked={selectPaletteName(colorBrewerState) === paletteName}\n                            onChange={handleChangePaletteName}\n                        >\n                            <ColorStack colors={chroma.scale(paletteName).colors(5, null)} />\n                        </Radio>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default ColorBrewer\n","import chroma, { Color } from 'chroma-js'\n\nexport const isValidHex = (hex: string) => {\n    if (hex.substring(0, 1) === '#') {\n        hex = hex.substring(1)\n    }\n\n    switch (hex.length) {\n        case 3:\n            return /^[0-9A-F]{3}$/i.test(hex)\n        case 6:\n            return /^[0-9A-F]{6}$/i.test(hex)\n        case 8:\n            return /^[0-9A-F]{8}$/i.test(hex)\n        default:\n            return false\n    }\n}\n\nexport const formatHexString = (string: string) => {\n    return string\n        .replace(/[^0-9A-F]/ig, '')\n        .substring(0, 6)\n}\n\nexport const colorToPercentageHsl = (color: Color) => {\n    const [h, s, l] = color.hsl()\n\n    return [\n        Math.round(isNaN(h) ? 0 : h),\n        Math.round(s * 100),\n        Math.round(l * 100)\n    ]\n}\n\nexport const percentageHslToColor = (h: number, s: number, l: number) => {\n    return chroma.hsl(h, s / 100, l / 100)\n}\n\nexport const isLightColor = (color: Color, threshold: number = 0.5) => {\n    return color.luminance() > threshold\n}","import clsx from 'clsx'\nimport { FC, InputHTMLAttributes } from 'react'\nimport Input from '../input'\nimport './range-input.css'\n\nexport interface RangeInputProps extends InputHTMLAttributes<HTMLInputElement> {\n\n}\n\nconst RangeInput: FC<RangeInputProps> = (props: RangeInputProps) => {\n    const { className, ...restProps } = props\n\n    return (\n        <Input\n            {...restProps}\n            className={clsx('range-input', className)}\n            type='range'\n        />\n    )\n}\n\nexport default RangeInput\n","import { ChangeEvent, FC } from 'react'\nimport NumberInput from '../number-input'\nimport RangeInput from '../range-input'\nimport './large-control.css'\n\nexport interface LargeControlProps {\n    title: string\n    value: number\n    minValue: number\n    maxValue: number\n    step: number\n    precision: number\n    onChange: (value: number) => void\n}\n\nconst LargeControl: FC<LargeControlProps> = (props: LargeControlProps) => {\n    const { title, value, minValue, maxValue, step, precision, onChange } = props\n\n    const handleChangeRangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        onChange(parsedValue)\n    }\n\n    return (\n        <div className='large-control'>\n            <div className='large-control__content'>\n                <label className='large-control__content-label'>\n                    {title}\n                </label>\n                <NumberInput\n                    className='large-control__content-input'\n                    value={value}\n                    min={minValue}\n                    max={maxValue}\n                    step={step}\n                    precision={precision}\n                    onChangeValue={onChange}\n                />\n            </div>\n            <RangeInput\n                value={value}\n                min={minValue}\n                max={maxValue}\n                step={step}\n                onChange={handleChangeRangeInput}\n            />\n        </div>\n    )\n}\n\nexport default LargeControl\n","import { ChangeEvent, FC, useState } from 'react'\nimport chroma, { Color } from 'chroma-js'\nimport { colorToPercentageHsl, formatHexString, isValidHex, percentageHslToColor } from '../../utils/color'\nimport LargeControl from '../large-control'\nimport Input from '../input'\nimport './color-picker.css'\n\nexport interface ColorPickerProps {\n    color: Color\n    onChangeColor: (color: Color) => void\n}\n\nconst ColorPicker: FC<ColorPickerProps> = (props: ColorPickerProps) => {\n    const { color, onChangeColor } = props\n\n    const [h, s, l] = colorToPercentageHsl(color)\n\n    const [hex, setHex] = useState<string>(color.hex().substring(1))\n    const [hue, setHue] = useState<number>(h)\n    const [saturation, setSaturation] = useState<number>(s)\n    const [lightness, setLightness] = useState<number>(l)\n\n    const handleChangeHex = (e: ChangeEvent<HTMLInputElement>) => {\n        const hex = formatHexString(e.target.value)\n        setHex(hex)\n\n        if (isValidHex(hex)) {\n            const newColor = chroma(hex)\n            const [newHue, newSaturation, newLightness] = colorToPercentageHsl(newColor)\n\n            setHue(newHue)\n            setSaturation(newSaturation)\n            setLightness(newLightness)\n\n            onChangeColor(newColor)\n        }\n    }\n\n    const handleChangeHue = (newHue: number) => {\n        setHue(newHue)\n\n        const newColor = percentageHslToColor(newHue, saturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeSaturation = (newSaturation: number) => {\n        setSaturation(newSaturation)\n\n        const newColor = percentageHslToColor(hue, newSaturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeLightness = (newLightness: number) => {\n        setLightness(newLightness)\n\n        const newColor = percentageHslToColor(hue, saturation, newLightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n\n    return (\n        <div className='color-picker'>\n                <Input\n                    className='color-picker__title'\n                    size={6}\n                    value={hex}\n                    onChange={handleChangeHex}\n                />\n            <div className='color-picker__controls'>\n                <LargeControl\n                    title='hue'\n                    value={hue}\n                    minValue={0}\n                    maxValue={360}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeHue}\n                />\n                <LargeControl\n                    title='saturation'\n                    value={saturation}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeSaturation}\n                />\n                <LargeControl\n                    title='lightness'\n                    value={lightness}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeLightness}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ColorPicker\n","import { ChangeEvent, FC, useContext } from 'react'\nimport { LantanaContext } from '../state/lantana/context'\nimport { selectColorPickers, selectGamma, selectPaletteMode, selectPaletteSize } from '../state/lantana/selectors'\nimport { setGamma, setPaletteMode, setPaletteSize, updateColorPicker } from '../state/lantana/actions'\nimport { Color, InterpolationMode } from 'chroma-js'\nimport ColorPicker from '../components/color-picker'\nimport Radio from '../components/radio-input'\nimport NumberInput from '../components/number-input'\nimport Card from '../components/card'\nimport CardTitle from '../components/card-title'\nimport CardContent from '../components/card-content'\n\nconst Lantana: FC = () => {\n    const { lantanaState, dispatch } = useContext(LantanaContext)\n\n    const modes: Array<InterpolationMode> = ['rgb', 'lrgb', 'hsl', 'hcl', 'hsi', 'lab', 'lch']\n    const pickers = selectColorPickers(lantanaState)\n\n    const handleChangeColor = (id: string) => (color: Color) => {\n        const updatedColorPicker = { id, color }\n\n        dispatch(updateColorPicker(updatedColorPicker))\n    }\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangePaletteMode = (e: ChangeEvent<HTMLInputElement>) => {\n        const mode = e.target.value\n\n        dispatch(setPaletteMode(mode as InterpolationMode))\n    }\n\n    const handleChangeGamma = (gamma: number) => {\n        dispatch(setGamma(gamma))\n    }\n\n    return (\n        <div className='grid sm:grid-cols-2 lg:grid-cols-4 gap-4'>\n            {pickers.map(picker =>\n                <Card key={picker.id}>\n                    <CardContent className='content-stretch'>\n                        <ColorPicker\n                            key={picker.id}\n                            color={picker.color}\n                            onChangeColor={handleChangeColor(picker.id)}\n                        />\n                    </CardContent>\n                </Card>\n            )}\n\n            <div className='grid sm:grid-cols-2 lg:grid-cols-1 sm:col-span-2 lg:col-span-2 gap-4'>\n                <Card>\n                    <CardTitle title='interpolation mode' />\n                    <CardContent>\n                        {modes.map(mode =>\n                            <Radio\n                                key={mode}\n                                id={mode}\n                                value={mode}\n                                checked={selectPaletteMode(lantanaState) === mode}\n                                onChange={handleChangePaletteMode}\n                            >\n                                {mode}\n                            </Radio>\n                        )}\n                    </CardContent>\n                </Card>\n\n                <div className='grid md:grid-cols-2 gap-4'>\n                    <Card>\n                        <CardTitle title='number of colors' />\n                        <CardContent>\n                            <NumberInput\n                                large\n                                value={selectPaletteSize(lantanaState)}\n                                min={0}\n                                max={30}\n                                step={1}\n                                precision={0}\n                                onChangeValue={handleChangePaletteSize}\n                            />\n                        </CardContent>\n                    </Card>\n\n                    <Card>\n                        <CardTitle title='center shift' />\n                        <CardContent>\n                            <NumberInput\n                                large\n                                value={selectGamma(lantanaState)}\n                                min={0}\n                                max={5}\n                                step={0.1}\n                                precision={1}\n                                onChangeValue={handleChangeGamma}\n                            />\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Lantana\n","import { Color } from 'chroma-js'\nimport clsx from 'clsx'\nimport copy from 'copy-to-clipboard'\nimport { FC, useState } from 'react'\nimport { isLightColor } from '../../utils/color'\nimport './palette-color.css'\n\nexport interface PaletteColorProps {\n    color: Color\n}\n\nconst PaletteColor: FC<PaletteColorProps> = (props: PaletteColorProps) => {\n    const { color } = props\n\n    const label = color.hex().substring(1).toUpperCase()\n\n    const [isCopied, setIsCopied] = useState(false)\n\n    const handleClick = () => {\n        copy(label)\n\n        setIsCopied(true)\n    }\n\n    return (\n        <div\n            className='palette-color group'\n            style={{ backgroundColor: color.hex() }}\n        >\n            <div\n                className={clsx(\n                    'palette-color__content',\n                    isCopied && 'palette-color__content--copied'\n                )}\n                onClick={handleClick}\n                onAnimationEnd={() => setIsCopied(false)}\n            >\n                <span className={clsx(\n                    'palette-color__label',\n                    isLightColor(color) ? 'palette-color__label--dark' : 'palette-color__label--light'\n                )}\n                >\n                    {isCopied ? 'Copy!' : label}\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default PaletteColor","import { FC } from 'react'\nimport PaletteColor from '../palette-color'\nimport { usePaletteColors } from '../../hooks/use-palette-colors'\nimport './palette.css'\n\nconst Palette: FC = () => {\n    const paletteColors = usePaletteColors()\n\n    return (\n        <div className='palette'>\n            {paletteColors.map((color, index) =>\n                <PaletteColor\n                    key={index}\n                    color={color}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default Palette","import { FC, useContext, useState } from 'react'\nimport { CubehelixContext } from '../state/cubehelix/context'\nimport { setDark, setGamma, setLight, setPaletteSize, setRotations, setStart } from '../state/cubehelix/actions'\nimport NumberInput from '../components/number-input'\nimport { selectDark, selectGamma, selectLight, selectPaletteSize, selectRotations, selectStart } from '../state/cubehelix/selectors'\nimport LargeControl from '../components/large-control'\nimport Card from '../components/card'\nimport CardContent from '../components/card-content'\nimport CardTitle from '../components/card-title'\n\nconst style = {\n    basicSettings: 'flex-col content-stretch gap-4 sm:gap-5'\n}\n\nconst Cubehelix: FC = () => {\n    const { cubehelixState, dispatch } = useContext(CubehelixContext)\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangeStart = (start: number) => {\n        dispatch(setStart(start))\n    }\n\n    const handleChangeRotations = (rotations: number) => {\n        dispatch(setRotations(rotations))\n    }\n\n    const handleChangeDark = (dark: number) => {\n        dispatch(setDark(dark))\n    }\n\n    const handleChangeLight = (light: number) => {\n        dispatch(setLight(light))\n    }\n\n    const handleChangeGamma = (gamma: number) => {\n        dispatch(setGamma(gamma))\n    }\n\n    return (\n        <div className='grid md:grid-cols-2 gap-4'>\n            <Card>\n                <CardContent className={style.basicSettings}>\n                    <LargeControl\n                        title='start'\n                        value={selectStart(cubehelixState)}\n                        minValue={0}\n                        maxValue={360}\n                        step={1}\n                        precision={0}\n                        onChange={handleChangeStart}\n                    />\n\n                    <LargeControl\n                        title='rotations'\n                        value={selectRotations(cubehelixState)}\n                        minValue={-2}\n                        maxValue={2}\n                        step={0.01}\n                        precision={2}\n                        onChange={handleChangeRotations}\n                    />\n\n                    <LargeControl\n                        title='gamma'\n                        value={selectGamma(cubehelixState)}\n                        minValue={0}\n                        maxValue={1}\n                        step={0.01}\n                        precision={2}\n                        onChange={handleChangeGamma}\n                    />\n                </CardContent>\n            </Card>\n\n            <div className='grid sm:grid-cols-2 md:grid-cols-1 gap-4'>\n                <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                    <Card>\n                        <CardContent>\n                            <LargeControl\n                                title='dark'\n                                value={selectDark(cubehelixState)}\n                                minValue={0}\n                                maxValue={1}\n                                step={0.01}\n                                precision={2}\n                                onChange={handleChangeDark}\n                            />\n                        </CardContent>\n                    </Card>\n\n                    <Card>\n                        <CardContent>\n                            <LargeControl\n                                title='light'\n                                value={selectLight(cubehelixState)}\n                                minValue={0}\n                                maxValue={1}\n                                step={0.01}\n                                precision={2}\n                                onChange={handleChangeLight}\n                            />\n                        </CardContent>\n                    </Card>\n                </div>\n\n                <Card>\n                    <CardTitle title='number of colors' />\n                    <CardContent>\n                        <NumberInput\n                            large\n                            value={selectPaletteSize(cubehelixState)}\n                            min={0}\n                            max={30}\n                            step={1}\n                            precision={0}\n                            onChangeValue={handleChangePaletteSize}\n                        />\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default Cubehelix\n","import { FC, useReducer } from 'react'\nimport Footer from './components/footer'\nimport Header from './components/header'\nimport { initialState as lantanaInitialState, lantanaReducer } from './state/lantana/reducer'\nimport { initialState as cubehelixInitialState, cubehelixReducer } from './state/cubehelix/reducer'\nimport { initialState as colorBrewerInitialState, colorBrewerReducer } from './state/color-brewer/reducer'\nimport { initialState as globalInitialState, globalReducer } from './state/global/reducer'\nimport { LantanaContext } from './state/lantana/context'\nimport { ColorBrewerContext } from './state/color-brewer/context'\nimport { CubehelixContext } from './state/cubehelix/context'\nimport { GlobalContext } from './state/global/context'\nimport ColorBrewer from './settings/ColorBrewer'\nimport Lantana from './settings/Lantana'\nimport { SettingsName } from './types'\nimport Palette from './components/palette'\nimport Cubehelix from './settings/Cubehelix'\n\nconst style = {\n    root: 'max-w-screen-xl min-h-full m-auto flex flex-col content-stretch gap-6',\n    content: 'flex flex-1 flex-col gap-6 px-3 sm:px-6',\n}\n\nconst App: FC = () => {\n    const [lantanaState, lantanaDispatch] = useReducer(lantanaReducer, lantanaInitialState)\n    const [colorBrewerState, colorBrewerDispatch] = useReducer(colorBrewerReducer, colorBrewerInitialState)\n    const [cubehelixState, cubehelixDispatch] = useReducer(cubehelixReducer, cubehelixInitialState)\n    const [globalState, globalDispatch] = useReducer(globalReducer, globalInitialState)\n\n    return (\n        <GlobalContext.Provider value={{ globalState, dispatch: globalDispatch }}>\n            <LantanaContext.Provider value={{ lantanaState, dispatch: lantanaDispatch }}>\n                <ColorBrewerContext.Provider value={{ colorBrewerState, dispatch: colorBrewerDispatch }}>\n                    <CubehelixContext.Provider value={{ cubehelixState, dispatch: cubehelixDispatch }}>\n                        <div className={style.root}>\n                            <Header />\n\n                            <div className={style.content}>\n                                <Palette />\n\n                                {globalState.currentSettings === SettingsName.Lantana && <Lantana />}\n                                {globalState.currentSettings === SettingsName.ColorBrewer && <ColorBrewer />}\n                                {globalState.currentSettings === SettingsName.Cubehelix && <Cubehelix />}\n                            </div>\n\n                            <Footer />\n                        </div>\n                    </CubehelixContext.Provider>\n                </ColorBrewerContext.Provider>\n            </LantanaContext.Provider>\n        </GlobalContext.Provider>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode >,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}