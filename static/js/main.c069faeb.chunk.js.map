{"version":3,"sources":["types/index.ts","state/color-brewer/actions.ts","components/footer/index.tsx","state/global/actions.ts","state/color-brewer/reducer.ts","state/color-brewer/context.ts","state/lantana/actions.ts","state/global/reducer.ts","state/global/context.ts","state/global/selectors.ts","state/lantana/reducer.ts","state/lantana/context.ts","state/lantana/selectors.ts","state/color-brewer/selectors.ts","hooks/use-palette-colors.ts","components/radio/index.tsx","components/tab-link/index.tsx","components/logos/ColorBrewerLogo.tsx","components/logos/LantanaLogo.tsx","components/header/index.tsx","components/color-stack/index.tsx","components/number-input/index.tsx","utils/number.ts","components/settings-item/index.tsx","utils/color-brewer-groups.ts","settings/ColorBrewer.tsx","utils/color.ts","components/large-control/index.tsx","components/color-picker/index.tsx","settings/Lantana.tsx","components/palette-color/index.tsx","components/palette/index.tsx","App.tsx","index.tsx"],"names":["SettingsName","ActionType","Footer","initialState","name","ColorBrewer","paletteSize","groupName","paletteName","colorBrewerReducer","state","action","type","SetPaletteSize","payload","SetGroupName","SetPaletteName","ColorBrewerContext","React","createContext","colorBrewerState","dispatch","currentSettings","Lantana","globalReducer","SetCurrentSettings","GlobalContext","globalState","selectCurrentSettings","initialFirstColor","chroma","hsl","initialSecondColor","colorPickers","id","nanoid","color","palette","mode","size","gamma","lantanaReducer","AddColorPicker","UpdateColorPicker","map","picker","DeleteColorPicker","filter","SetPalette","SetPaletteMode","SetGamma","LantanaContext","lantanaState","selectPaletteSize","selectPaletteMode","selectGamma","selectColorsFromColorPickers","selectGroupName","selectPaletteName","usePaletteColors","useContext","scale","colors","selectColorBrewerColors","style","Radio","className","children","value","checked","onChange","clsx","radio","htmlFor","label","TabLink","description","settings","e","target","setCurrentSettings","ColorBrewerLogo","brewer","index","hex","LantanaLogo","length","Header","paletteColors","onClick","copy","JSON","stringify","ColorStack","backgroundColor","NumberInput","minValue","maxValue","step","precision","useState","toString","inputValue","setInputValue","focus","setFocus","useEffect","setParsedValue","parsedValue","isNaN","inputWrapper","input","min","max","parseFloat","onBlur","onFocus","onWheel","newValue","deltaY","scaleFactor","Math","round","toPrecision","SettingsItem","colorBrewerGroups","handleChangeGroupName","setGroupName","handleChangePaletteName","setPaletteName","setPaletteSize","colorToPercentageHsl","h","s","l","percentageHslToColor","isLightColor","threshold","luminance","LargeControl","title","ColorPicker","onChangeColor","substring","setHex","hue","setHue","saturation","setSaturation","lightness","setLightness","replace","test","isValidHex","newColor","newHue","newSaturation","newLightness","pickers","handleChangeColor","colorPicker","handleChangePaletteMode","setPaletteMode","setGamma","CopyColorValue","isCopied","setIsCopied","setTimeout","PaletteColor","toUpperCase","lab","toFixed","lch","labCss","lchCss","rgbCss","css","hslCss","Palette","App","useReducer","lantanaInitialState","lantanaDispatch","colorBrewerInitialState","colorBrewerDispatch","globalInitialState","globalDispatch","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c069faeb.chunk.js","sourcesContent":["import { brewer, Color, InterpolationMode } from 'chroma-js'\n\nexport interface Picker {\n    id: string\n    color: Color\n}\n\nexport interface Palette {\n    size: number\n    mode: InterpolationMode\n    gamma: number\n}\n\nexport interface SettingsState {\n    name: SettingsName\n}\n\nexport interface LantanaState extends SettingsState {\n    name: SettingsName.Lantana\n    colorPickers: Picker[]\n    palette: Palette\n}\n\nexport interface ColorBrewerState extends SettingsState {\n    name: SettingsName.ColorBrewer\n    paletteSize: number\n    groupName: ColorBrewerGroupName\n    paletteName: keyof typeof brewer\n}\n\nexport interface GlobalState {\n    currentSettings: SettingsName\n}\n\nexport enum SettingsName {\n    Lantana = 'Lantana',\n    ColorBrewer = 'ColorBrewer'\n}\n\nexport type ColorBrewerGroupName = 'diverging' | 'qualitative' | 'sequential'\n","import { brewer } from 'chroma-js'\nimport { ColorBrewerGroupName } from '../../types'\n\nexport enum ActionType {\n    SetPaletteSize,\n    SetGroupName,\n    SetPaletteName\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport interface SetGroupName {\n    type: ActionType.SetGroupName,\n    payload: ColorBrewerGroupName\n} \n\nexport interface SetPaletteName {\n    type: ActionType.SetPaletteName,\n    payload: keyof typeof brewer\n} \n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\nexport const setGroupName = (groupName: ColorBrewerGroupName): SetGroupName => ({\n    type: ActionType.SetGroupName,\n    payload: groupName\n})\n\nexport const setPaletteName = (paletteName: keyof typeof brewer): SetPaletteName => ({\n    type: ActionType.SetPaletteName,\n    payload: paletteName\n})\n\nexport type Actions = SetPaletteSize | SetGroupName | SetPaletteName\n","import React from 'react'\n\nconst Footer: React.FC = () => {\n    return (\n        <footer>\n\n        </footer>\n    )\n}\n\nexport default Footer","import { SettingsName } from '../../types'\n\nexport enum ActionType {\n    SetCurrentSettings\n}\n\nexport interface SetCurrentSettings {\n    type: ActionType.SetCurrentSettings,\n    payload: SettingsName\n}\n\nexport const setCurrentSettings= (settings: SettingsName): SetCurrentSettings => ({\n    type: ActionType.SetCurrentSettings,\n    payload: settings\n})\n\nexport type Actions = SetCurrentSettings\n","import { ColorBrewerState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialPaletteSize = 9\nconst initialGroupName = 'sequential'\nconst initialPaletteName = 'YlGnBu'\n\nexport const initialState: ColorBrewerState = {\n    name: SettingsName.ColorBrewer,\n    paletteSize: initialPaletteSize,\n    groupName: initialGroupName,\n    paletteName: initialPaletteName\n}\n\nexport const colorBrewerReducer = (state: ColorBrewerState, action: Actions): ColorBrewerState => {\n    switch (action.type) {\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                paletteSize: action.payload\n            }\n        case ActionType.SetGroupName:\n            return {\n                ...state,\n                groupName: action.payload\n            }\n        case ActionType.SetPaletteName:\n            return {\n                ...state,\n                paletteName: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { ColorBrewerState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const ColorBrewerContext = React.createContext<{\n    colorBrewerState: ColorBrewerState\n    dispatch: React.Dispatch<Actions>\n}>({\n    colorBrewerState: initialState,\n    dispatch: () => undefined\n})","import { InterpolationMode } from 'chroma-js'\nimport { Picker, Palette } from '../../types'\n\nexport enum ActionType {\n    AddColorPicker,\n    UpdateColorPicker,\n    DeleteColorPicker,\n    SetPalette,\n    SetPaletteMode,\n    SetPaletteSize,\n    SetGamma\n}\n\nexport interface AddColorPicker {\n    type: ActionType.AddColorPicker,\n    payload: Picker\n}\n\nexport interface UpdateColorPicker {\n    type: ActionType.UpdateColorPicker,\n    payload: Picker\n}\n\nexport interface DeleteColorPicker {\n    type: ActionType.DeleteColorPicker,\n    payload: string\n}\n\nexport interface SetPalette {\n    type: ActionType.SetPalette,\n    payload: Palette\n}\n\nexport interface SetPaletteMode {\n    type: ActionType.SetPaletteMode,\n    payload: InterpolationMode\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport interface SetGamma {\n    type: ActionType.SetGamma,\n    payload: number\n}\n\nexport const addColorPicker = (colorPicker: Picker): AddColorPicker => ({\n    type: ActionType.AddColorPicker,\n    payload: colorPicker\n})\n\nexport const updateColorPicker = (colorPicker: Picker): UpdateColorPicker => ({\n    type: ActionType.UpdateColorPicker,\n    payload: colorPicker\n})\n\nexport const deleteColorPicker = (id: string): DeleteColorPicker => ({\n    type: ActionType.DeleteColorPicker,\n    payload: id\n})\n\nexport const setPalette = (palette: Palette): SetPalette => ({\n    type: ActionType.SetPalette,\n    payload: palette\n})\n\nexport const setPaletteMode = (mode: InterpolationMode): SetPaletteMode => ({\n    type: ActionType.SetPaletteMode,\n    payload: mode\n})\n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\nexport const setGamma = (gamma: number): SetGamma => ({\n    type: ActionType.SetGamma,\n    payload: gamma\n})\n\n\nexport type Actions = AddColorPicker\n    | UpdateColorPicker\n    | DeleteColorPicker\n    | SetPalette\n    | SetPaletteMode\n    | SetPaletteSize\n    | SetGamma\n","import { GlobalState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialCurrentSettings = SettingsName.Lantana\n\nexport const initialState: GlobalState = {\n    currentSettings: initialCurrentSettings\n}\n\nexport const globalReducer = (state: GlobalState, action: Actions): GlobalState => {\n    switch (action.type) {\n        case ActionType.SetCurrentSettings:\n            return {\n                ...state,\n                currentSettings: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { GlobalState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const GlobalContext = React.createContext<{\n    globalState: GlobalState\n    dispatch: React.Dispatch<Actions>\n}>({\n    globalState: initialState,\n    dispatch: () => undefined\n})","import { GlobalState, SettingsName } from '../../types'\n\nexport const selectCurrentSettings = (state: GlobalState): SettingsName => state.currentSettings\n","import chroma from 'chroma-js'\nimport { nanoid } from 'nanoid'\nimport { LantanaState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialFirstColor = chroma.hsl(358, 1, 0.92)\nconst initialSecondColor = chroma.hsl(238, 1, 0.10)\nconst initialPaletteSize = 9\nconst initialPaletteMode = 'hsi'\nconst initialGamma = 1\n\n\nexport const initialState: LantanaState = {\n    name: SettingsName.Lantana,\n    colorPickers: [\n        {\n            id: nanoid(),\n            color: initialFirstColor\n        },\n        {\n            id: nanoid(),\n            color: initialSecondColor\n        },\n    ],\n    palette: {\n        mode: initialPaletteMode,\n        size: initialPaletteSize,\n        gamma: initialGamma\n    }\n}\n\nexport const lantanaReducer = (state: LantanaState, action: Actions): LantanaState => {\n    switch (action.type) {\n        case ActionType.AddColorPicker:\n            return {\n                ...state,\n                colorPickers: [...state.colorPickers, action.payload]\n            }\n        case ActionType.UpdateColorPicker:\n            return {\n                ...state,\n                colorPickers: state.colorPickers.map(picker =>\n                    picker.id === action.payload.id ? { ...picker, ...action.payload } : picker\n                )\n            }\n        case ActionType.DeleteColorPicker:\n            return {\n                ...state,\n                colorPickers: state.colorPickers.filter(picker => picker.id !== action.payload)\n            }\n        case ActionType.SetPalette:\n            return {\n                ...state,\n                palette: action.payload\n            }\n        case ActionType.SetPaletteMode:\n            return {\n                ...state,\n                palette: { ...state.palette, mode: action.payload }\n            }\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                palette: { ...state.palette, size: action.payload }\n            }\n        case ActionType.SetGamma:\n            return {\n                ...state,\n                palette: { ...state.palette, gamma: action.payload }\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { LantanaState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const LantanaContext = React.createContext<{\n    lantanaState: LantanaState\n    dispatch: React.Dispatch<Actions>\n}>({\n    lantanaState: initialState,\n    dispatch: () => undefined\n})","import chroma, { Color, InterpolationMode } from 'chroma-js'\nimport { LantanaState, Palette, Picker } from '../../types'\n\n\nexport const selectPalette = (state: LantanaState): Palette => state.palette\nexport const selectPaletteSize = (state: LantanaState): number => state.palette.size\nexport const selectPaletteMode = (state: LantanaState): InterpolationMode => state.palette.mode\nexport const selectGamma = (state: LantanaState): number => state.palette.gamma\n\nexport const selectColorPickers = (state: LantanaState): Picker[] => state.colorPickers\n\nexport const selectColorsFromColorPickers = (state: LantanaState): Color[] => state.colorPickers.map(picker => picker.color)\n\nexport const selectPaletteColors = (state: LantanaState): Color[] => {\n    return chroma\n        .scale(selectColorsFromColorPickers(state))\n        .mode(selectPaletteMode(state))\n        .gamma(selectGamma(state))\n        .colors(selectPaletteSize(state), null)\n}\n","import chroma, { brewer, Color } from 'chroma-js'\nimport { ColorBrewerGroupName, ColorBrewerState } from '../../types'\n\nexport const selectPaletteSize = (state: ColorBrewerState): number => state.paletteSize\nexport const selectGroupName = (state: ColorBrewerState): ColorBrewerGroupName => state.groupName\nexport const selectPaletteName = (state: ColorBrewerState): keyof typeof brewer => state.paletteName\n\nexport const selectPaletteColors = (state: ColorBrewerState): Color[] => {\n    return chroma\n        .scale(selectPaletteName(state))\n        .colors(selectPaletteSize(state), null)\n}\n","import { useContext } from 'react'\nimport { ColorBrewerContext } from '../state/color-brewer/context'\nimport { GlobalContext } from '../state/global/context'\nimport { selectCurrentSettings } from '../state/global/selectors'\nimport { LantanaContext } from '../state/lantana/context'\nimport { SettingsName } from '../types'\nimport { selectPaletteColors as selectLantanaColors } from '../state/lantana/selectors'\nimport { selectPaletteColors as selectColorBrewerColors } from '../state/color-brewer/selectors'\n\nexport const usePaletteColors = () => {\n    const { globalState } = useContext(GlobalContext)\n    const { lantanaState } = useContext(LantanaContext)\n    const { colorBrewerState } = useContext(ColorBrewerContext)\n\n    switch (selectCurrentSettings(globalState)) {\n        case SettingsName.Lantana:\n            return selectLantanaColors(lantanaState)\n        case SettingsName.ColorBrewer:\n            return selectColorBrewerColors(colorBrewerState)\n    }\n}\n\n","import clsx from 'clsx'\nimport React from 'react'\n\ninterface ClassNameProps {\n    radio?: string\n    label?: string\n}\n\nexport interface RadioProps {\n    id: string\n    className?: ClassNameProps\n    value: string | number\n    checked: boolean\n    onChange: React.ChangeEventHandler<HTMLInputElement>\n    children?: React.ReactNode | string\n}\n\nconst style = {\n    radio: 'flex',\n    label: ''\n}\n\nconst Radio: React.FC<RadioProps> = ({ id, className, children, value, checked, onChange }) => {\n    return (\n        <div className={clsx(style.radio, className?.radio)}>\n            <input\n                id={id}\n                type='radio'\n                value={value}\n                checked={checked}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={id}\n                className={clsx(style.label, className?.label)}\n            >\n                {children ? children : value}\n            </label>\n        </div>\n    )\n}\n\nexport default Radio","import clsx from 'clsx'\nimport React, { ChangeEvent, useContext } from 'react'\nimport { setCurrentSettings } from '../../state/global/actions'\nimport { GlobalContext } from '../../state/global/context'\nimport { selectCurrentSettings } from '../../state/global/selectors'\nimport { SettingsName } from '../../types'\nimport Radio from '../radio'\n\nexport interface TabLinkProps {\n    description?: string\n    settings: SettingsName\n    children: React.ReactNode\n}\n\nconst style = {\n    tabLink: 'flex flex-col items-center px-3 scroll-snap-align-start transition-all',\n    radioLabel: 'flex flex-nowrap items-center justify-center min-w-max text-3xl sm:text-4xl',\n    description: 'text-base text-center cursor-default',\n}\n\nconst TabLink: React.FC<TabLinkProps> = ({ description, settings, children }) => {\n    const { globalState, dispatch } = useContext(GlobalContext)\n    \n    const checked = selectCurrentSettings(globalState) === settings\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const settings = e.target.value\n\n        dispatch(setCurrentSettings(settings as SettingsName))\n    }\n\n    return (\n        <div className={style.tabLink}>\n            <Radio\n                id={settings}\n                className={{label: style.radioLabel}}\n                value={settings}\n                checked={checked}\n                onChange={handleChange}\n            >\n                {children}\n            </Radio>\n\n            {description &&\n                <span className={clsx(style.description, !checked && 'invisible')}>\n                    {description}\n                </span>\n            }\n        </div>\n    )\n}\n\nexport default TabLink\n","import chroma, { brewer } from 'chroma-js'\nimport React, { useContext } from 'react'\nimport { ColorBrewerContext } from '../../state/color-brewer/context'\nimport { selectPaletteName } from '../../state/color-brewer/selectors'\n\nconst ColorBrewerLogo: React.FC = () => {\n    const { colorBrewerState } = useContext(ColorBrewerContext)\n\n    const colors = chroma\n        .scale(brewer[selectPaletteName(colorBrewerState)])\n        .colors(3, null)\n\n    return (\n        <>\n            <span>colorbrewer</span>\n\n            {colors.map((color, index) =>\n                <div key={index}>\n                    <span style={{ color: color.hex() }}>•</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default ColorBrewerLogo\n","import React, { useContext } from 'react'\nimport { LantanaContext } from '../../state/lantana/context'\nimport { selectColorsFromColorPickers } from '../../state/lantana/selectors'\n\nconst LantanaLogo: React.FC = () => {\n    const { lantanaState } = useContext(LantanaContext)\n\n    const colors = selectColorsFromColorPickers(lantanaState)\n\n    return (\n        <>\n            <span>lantana</span>\n\n            {colors.map((color, index) =>\n                <div key={index} className='flex items-center'>\n                    <span style={{ color: color.hex() }}>•</span>\n                    {index + 1 !== colors.length && <span>{'->'}</span>}\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default LantanaLogo\n","import React from 'react'\nimport copy from 'copy-to-clipboard'\nimport { usePaletteColors } from '../../hooks/use-palette-colors'\nimport { SettingsName } from '../../types'\nimport TabLink from '../tab-link'\nimport { ColorBrewerLogo, LantanaLogo } from '../logos'\n\nconst style = {\n    header: 'flex flex-nowrap justify-between mb-6 mt-4 no-scrollbar overflow-x-scroll scroll-snap-x',\n    tabs: 'flex flex-nowrap',\n    actions: 'flex items-start min-w-max px-3 scroll-snap-align-start'\n}\n\nconst Header: React.FC = () => {\n    const paletteColors = usePaletteColors()\n\n    const handleClickCopy = () => {\n        copy(JSON.stringify(paletteColors.map(color => color.hex())))\n    }\n\n    return (\n        <header className={style.header}>\n            <div className={style.tabs}>\n                <TabLink\n                    settings={SettingsName.Lantana}\n                    description='tool for creating color schemes'\n                >\n                    <LantanaLogo />\n                </TabLink>\n\n                <TabLink\n                    settings={SettingsName.ColorBrewer}\n                    description='color schemes by Dr. Cynthia Brewer'\n                >\n                    <ColorBrewerLogo />\n                </TabLink>\n            </div>\n\n            <div className={style.actions}>\n                <button onClick={handleClickCopy}>\n                    copy as array\n                </button>\n            </div>\n        </header>\n    )\n}\n\nexport default Header","import { Color } from 'chroma-js'\nimport React from 'react'\n\nexport interface ColorStackProps {\n    colors: Color[]\n}\n\nconst style = {\n    stack: 'flex items-center py-1 px-0.5 box-content first:ml-1.0 last:-mr-2',\n    color: 'w-5 h-5 rounded-full -ml-2'\n}\n\nconst ColorStack: React.FC<ColorStackProps> = ({ colors }) => {\n    return (\n        <div className={style.stack}>\n            {colors.map((color, index) =>\n                <div\n                    key={color.hex()}\n                    className={style.color}\n                    style={{ backgroundColor: color.hex() }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ColorStack","import { ChangeEvent, useEffect, useState, WheelEvent } from 'react'\nimport { toPrecision } from '../../utils/number'\n\ninterface ClassNameProps {\n    inputWrapper?: string\n    input?: string\n}\n\nexport interface NumberInputProps {\n    className?: ClassNameProps\n    value: number\n    minValue: number\n    maxValue: number\n    step: number\n    precision: number\n    onChange: (value: number) => void\n}\n\nconst NumberInput: React.FC<NumberInputProps> = ({ className, value, minValue, maxValue, step, precision, onChange }) => {\n    const [inputValue, setInputValue] = useState<string>(value.toString())\n    const [focus, setFocus] = useState<boolean>(false)\n\n    useEffect(() => {\n        setInputValue(value.toString())\n    }, [value])\n\n    const setParsedValue = (parsedValue: number) => {\n        if (!isNaN(parsedValue)) {\n            if (parsedValue > maxValue) {\n                onChange(maxValue)\n            }\n\n            if (parsedValue < minValue) {\n                onChange(minValue)\n            }\n\n            if (parsedValue >= minValue && parsedValue <= maxValue) {\n                onChange(parsedValue)\n            }\n        } else {\n            setInputValue('')\n        }\n    }\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        setParsedValue(parsedValue)\n    }\n\n    const handleWheel = (e: WheelEvent<HTMLInputElement>) => {\n        if (focus) {\n            const newValue = e.deltaY > 0 ? value + step : value - step\n\n            setParsedValue(toPrecision(newValue, precision))\n        }\n    }\n\n    const handleBlur = () => {\n        setFocus(false)\n\n        const parsedValue = parseFloat(inputValue)\n\n        if (isNaN(parsedValue)) {\n            setInputValue(value.toString())\n        }\n    }\n\n    const handleFocus = () => {\n        setFocus(true)\n    }\n\n\n    return (\n        <div className={className?.inputWrapper}>\n            <input\n                className={className?.input}\n                type='number'\n                min={minValue}\n                max={maxValue}\n                step={step}\n                size={1}\n                value={inputValue}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                onWheel={handleWheel}\n            />\n        </div>\n    )\n}\n\nexport default NumberInput","export const toPrecision = (value: number, precision: number) => {\n    const scaleFactor = 10 ** precision\n    \n    return Math.round(value * scaleFactor) / scaleFactor\n}","import React from 'react'\n\nexport interface SettingsItemProps {\n    label?: string,\n    children: React.ReactNode\n}\n\nconst style = {\n    settingsItem: 'flex flex-wrap items-center gap-2',\n    label: '',\n    content: 'flex flex-wrap flex-grow gap-2'\n}\n\nconst SettingsItem: React.FC<SettingsItemProps> = ({ label, children }) => {\n    return (\n        <div className={style.settingsItem}>\n            {label &&\n                <label className={style.label}>\n                    {label}\n                </label>\n            }\n\n            <div className={style.content}>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsItem","import { brewer } from 'chroma-js'\n\nexport const colorBrewerGroups = {\n    'diverging': [\n        'Spectral',\n        'RdYlGn',\n        'RdBu',\n        'PiYG',\n        'PRGn',\n        'RdYlBu',\n        'BrBG',\n        'RdGy',\n        'PuOr'\n    ] as Array<keyof typeof brewer>,\n    'qualitative': [\n        'Set2',\n        'Accent',\n        'Set1',\n        'Set3',\n        'Dark2',\n        'Paired',\n        'Pastel2',\n        'Pastel1',\n    ] as Array<keyof typeof brewer>,\n    'sequential': [\n        'OrRd',\n        'PuBu',\n        'BuPu',\n        'Oranges',\n        'BuGn',\n        'YlOrBr',\n        'YlGn',\n        'Reds',\n        'RdPu',\n        'Greens',\n        'YlGnBu',\n        'Purples',\n        'GnBu',\n        'Greys',\n        'YlOrRd',\n        'PuRd',\n        'Blues',\n        'PuBuGn',\n    ] as Array<keyof typeof brewer>\n}","import chroma from 'chroma-js'\nimport { brewer } from 'chroma-js'\nimport React, { ChangeEvent, useContext } from 'react'\nimport ColorStack from '../components/color-stack'\nimport NumberInput from '../components/number-input'\nimport Radio from '../components/radio'\nimport SettingsItem from '../components/settings-item'\nimport { setGroupName, setPaletteName, setPaletteSize } from '../state/color-brewer/actions'\nimport { ColorBrewerContext } from '../state/color-brewer/context'\nimport { selectGroupName, selectPaletteName, selectPaletteSize } from '../state/color-brewer/selectors'\nimport { ColorBrewerGroupName } from '../types'\nimport { colorBrewerGroups } from '../utils/color-brewer-groups'\n\nconst ColorBrewer: React.FC = () => {\n    const { colorBrewerState, dispatch } = useContext(ColorBrewerContext)\n\n    const groupNames: Array<ColorBrewerGroupName> = ['sequential', 'diverging', 'qualitative']\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangeGroupName = (e: ChangeEvent<HTMLInputElement>) => {\n        const groupName = e.target.value\n\n        dispatch(setGroupName(groupName as ColorBrewerGroupName))\n    }\n\n\n    const handleChangePaletteName = (e: ChangeEvent<HTMLInputElement>) => {\n        const paletteName = e.target.value\n\n        dispatch(setPaletteName(paletteName as keyof typeof brewer))\n    }\n\n    return (\n        <>\n            <SettingsItem label='nature of data'>\n                {groupNames.map(groupName =>\n                    <Radio\n                        key={groupName}\n                        id={groupName}\n                        value={groupName}\n                        checked={selectGroupName(colorBrewerState) === groupName}\n                        onChange={handleChangeGroupName}\n                    >\n                        {groupName}\n                    </Radio>\n                )}\n            </SettingsItem>\n\n            <SettingsItem label='color scheme'>\n                {colorBrewerGroups[selectGroupName(colorBrewerState)].map(paletteName =>\n                    <Radio\n                        key={paletteName}\n                        id={paletteName}\n                        value={paletteName}\n                        checked={selectPaletteName(colorBrewerState) === paletteName}\n                        onChange={handleChangePaletteName}\n                    >\n                        <ColorStack colors={chroma.scale(paletteName).colors(5, null)} />\n                    </Radio>\n                )}\n            </SettingsItem>\n\n            <SettingsItem label='number of colors'>\n                <NumberInput\n                    value={selectPaletteSize(colorBrewerState)}\n                    minValue={0}\n                    maxValue={20}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangePaletteSize}\n                />\n            </SettingsItem>\n        </>\n    )\n}\n\nexport default ColorBrewer\n","import chroma, { Color } from 'chroma-js'\n\nexport const isValidHex = (hex: string) => {\n    if (hex.substring(0, 1) === '#') {\n        hex = hex.substring(1)\n    }\n\n    switch (hex.length) {\n        case 3:\n            return /^[0-9A-F]{3}$/i.test(hex)\n        case 6:\n            return /^[0-9A-F]{6}$/i.test(hex)\n        case 8:\n            return /^[0-9A-F]{8}$/i.test(hex)\n        default:\n            return false\n    }\n}\n\nexport const formatHexString = (string: string) => {\n    return string\n        .replace(/[^0-9A-F]/ig, '')\n        .substring(0, 6)\n}\n\nexport const colorToPercentageHsl = (color: Color) => {\n    const [h, s, l] = color.hsl()\n\n    return [\n        Math.round(isNaN(h) ? 0 : h),\n        Math.round(s * 100),\n        Math.round(l * 100)\n    ]\n}\n\nexport const percentageHslToColor = (h: number, s: number, l: number) => {\n    return chroma.hsl(h, s / 100, l / 100)\n}\n\nexport const isLightColor = (color: Color, threshold: number = 0.5) => {\n    return color.luminance() > threshold\n}","import React, { ChangeEvent } from 'react'\nimport NumberInput from '../number-input'\n\nexport interface LargeControlProps {\n    title: string\n    value: number\n    minValue: number\n    maxValue: number\n    step: number\n    precision: number\n    onChange: (value: number) => void\n}\n\nconst style = {\n    control: 'flex flex-col gap-1',\n    label: 'flex-grow select-none mr-2',\n    numberInput: 'text-right'\n}\n\nconst LargeControl: React.FC<LargeControlProps> = ({ title, value, minValue, maxValue, step, precision, onChange }) => {\n    const handleChangeRangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        onChange(parsedValue)\n    }\n\n    return (\n        <div className={style.control}>\n            <div className='flex'>\n                <label className={style.label}>\n                    {title}\n                </label>\n                <NumberInput\n                    className={{ input: style.numberInput }}\n                    value={value}\n                    minValue={minValue}\n                    maxValue={maxValue}\n                    step={step}\n                    precision={precision}\n                    onChange={onChange}\n                />\n            </div>\n            <input\n                type='range'\n                value={value}\n                min={minValue}\n                max={maxValue}\n                step={step}\n                onChange={handleChangeRangeInput}\n            />\n        </div>\n    )\n}\n\nexport default LargeControl","import React, { ChangeEvent, useState } from 'react'\nimport chroma, { Color } from 'chroma-js'\nimport { colorToPercentageHsl, formatHexString, isValidHex, percentageHslToColor } from '../../utils/color'\nimport LargeControl from '../large-control'\n\nexport interface ColorPickerProps {\n    color: Color\n    onChangeColor: (color: Color) => void\n}\n\nconst style = {\n    colorPicker: 'flex-1 flex-col items-start mb-4',\n    title: 'text-black transition-all ease-in-out mb-4',\n    titleInput: 'uppercase text-3xl font-semibold',\n    controls: 'flex flex-col gap-5 w-full'\n}\n\nconst ColorPicker: React.FC<ColorPickerProps> = ({ color, onChangeColor }) => {\n    const [h, s, l] = colorToPercentageHsl(color)\n\n    const [hex, setHex] = useState<string>(color.hex().substring(1))\n    const [hue, setHue] = useState<number>(h)\n    const [saturation, setSaturation] = useState<number>(s)\n    const [lightness, setLightness] = useState<number>(l)\n\n    const handleChangeHex = (e: ChangeEvent<HTMLInputElement>) => {\n        const hex = formatHexString(e.target.value)\n        setHex(hex)\n\n        if (isValidHex(hex)) {\n            const newColor = chroma(hex)\n            const [newHue, newSaturation, newLightness] = colorToPercentageHsl(newColor)\n\n            setHue(newHue)\n            setSaturation(newSaturation)\n            setLightness(newLightness)\n\n            onChangeColor(newColor)\n        }\n    }\n\n    const handleChangeHue = (newHue: number) => {\n        setHue(newHue)\n        \n        const newColor = percentageHslToColor(newHue, saturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeSaturation = (newSaturation: number) => {\n        setSaturation(newSaturation)\n\n        const newColor = percentageHslToColor(hue, newSaturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeLightness = (newLightness: number) => {\n        setLightness(newLightness)\n\n        const newColor = percentageHslToColor(hue, saturation, newLightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n\n    return (\n        <div className={style.colorPicker}>\n            <div className={style.title}>\n                <input\n                    className={style.titleInput}\n                    type='text'\n                    size={6}\n                    value={hex}\n                    onChange={handleChangeHex}\n                />\n            </div>\n            <div className={style.controls}>\n                <LargeControl\n                    title='hue'\n                    value={hue}\n                    minValue={0}\n                    maxValue={360}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeHue}\n                />\n                <LargeControl\n                    title='saturation'\n                    value={saturation}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeSaturation}\n                />\n                <LargeControl\n                    title='lightness'\n                    value={lightness}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeLightness}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ColorPicker","import React, { ChangeEvent, useContext } from 'react'\nimport { LantanaContext } from '../state/lantana/context'\nimport { selectColorPickers, selectGamma, selectPaletteMode, selectPaletteSize } from '../state/lantana/selectors'\nimport { setGamma, setPaletteMode, setPaletteSize, updateColorPicker } from '../state/lantana/actions'\nimport { Color, InterpolationMode } from 'chroma-js'\nimport ColorPicker from '../components/color-picker'\nimport Radio from '../components/radio'\nimport NumberInput from '../components/number-input'\nimport SettingsItem from '../components/settings-item'\n\nconst style = {\n    colorPickers: 'flex flex-col sm:flex-row gap-8',\n}\n\nconst Lantana: React.FC = () => {\n    const { lantanaState, dispatch } = useContext(LantanaContext)\n\n    const modes: Array<InterpolationMode> = ['rgb', 'lrgb', 'hsl', 'hcl', 'hsi', 'lab', 'lch']\n    const pickers = selectColorPickers(lantanaState)\n\n    const handleChangeColor = (id: string) => (color: Color) => {\n        const updatedColorPicker = { id, color }\n\n        dispatch(updateColorPicker(updatedColorPicker))\n    }\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangePaletteMode = (e: ChangeEvent<HTMLInputElement>) => {\n        const mode = e.target.value\n\n        dispatch(setPaletteMode(mode as InterpolationMode))\n    }\n\n    const handleChangeGamma = (gamma: number) => {\n        dispatch(setGamma(gamma))\n    }\n\n    return (\n        <>\n            <div className={style.colorPickers}>\n                {pickers.map(picker =>\n                    <ColorPicker\n                        key={picker.id}\n                        color={picker.color}\n                        onChangeColor={handleChangeColor(picker.id)}\n                    />\n                )}\n            </div>\n\n            <SettingsItem label='interpolation mode'>\n                {modes.map(mode =>\n                    <Radio\n                        key={mode}\n                        id={mode}\n                        value={mode}\n                        checked={selectPaletteMode(lantanaState) === mode}\n                        onChange={handleChangePaletteMode}\n                    >\n                        {mode}\n                    </Radio>\n                )}\n            </SettingsItem>\n\n            <SettingsItem label='number of colors'>\n                <NumberInput\n                    className={{ inputWrapper: ' flex-grow' }}\n                    value={selectPaletteSize(lantanaState)}\n                    minValue={0}\n                    maxValue={20}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangePaletteSize}\n                />\n            </SettingsItem>\n\n            <SettingsItem label='center shift'>\n                <NumberInput\n                    value={selectGamma(lantanaState)}\n                    minValue={0}\n                    maxValue={5}\n                    step={0.1}\n                    precision={1}\n                    onChange={handleChangeGamma}\n                />\n            </SettingsItem>\n        </>\n    )\n}\n\nexport default Lantana\n","import { Color } from 'chroma-js'\nimport clsx from 'clsx'\nimport copy from 'copy-to-clipboard'\nimport React, { useState } from 'react'\nimport { isLightColor } from '../../utils/color'\n\ninterface CopyColorValueProps {\n    value: string\n    label: string\n    className?: string\n}\n\nexport interface PaletteColorProps {\n    color: Color\n}\n\nconst style = {\n    paletteColor: 'group flex flex-1 items-center justify-center tap-highlight-transparent transition-all ease-in-out',\n    content: 'h-0 overflow-hidden group-hover:h-auto transition-height ease-in-out select-none',\n    values: 'flex flex-col px-2 py-3 sm:py-5 gap-1 sm:gap-2 items-center justify-center opacity-0 group-hover:opacity-100 text-lg transition-opacity ease-in-out',\n    cssValues: 'flex flex-col gap-0 md:gap-2 md:flex-row items-center',\n    value: 'cursor-pointer p-1',\n    hexValue: 'font-bold md:text-3xl'\n}\n\nconst CopyColorValue: React.FC<CopyColorValueProps> = ({ value, label, className }) => {\n    const [isCopied, setIsCopied] = useState(false)\n\n    const handleClick = () => {\n        copy(value)\n\n        setIsCopied(true)\n        setTimeout(() => setIsCopied(false), 400)\n    }\n\n    return (\n        <>\n            <span\n                className={clsx(style.value, className)}\n                onClick={handleClick}\n            >\n                {isCopied ? 'Copied!' : label}\n            </span>\n        </>\n    )\n}\n\nconst PaletteColor: React.FC<PaletteColorProps> = ({ color }) => {\n    const label = color.hex().substring(1).toUpperCase()\n\n    const lab = color.lab().map(value => value.toFixed(4))\n    const lch = color.lch().map(value => value.toFixed(4))\n\n    const labCss = `lab(${lab[0]}% ${lab[1]} ${lab[2]})`\n    const lchCss = `lch(${lch[0]}% ${lch[1]} ${lch[2]})`\n    const rgbCss = color.css()\n    const hslCss = color.css('hsl')\n\n    return (\n        <div\n            className={style.paletteColor}\n            style={{ backgroundColor: color.hex() }}\n        >\n            <div className={style.content}>\n                <div className={clsx(style.values, isLightColor(color) ? 'text-black' : 'text-white')}>\n                    <CopyColorValue className={style.hexValue} label={label} value={color.hex()} />\n\n                    <div className={style.cssValues}>\n                        <CopyColorValue label='hsl' value={hslCss} />\n                        <CopyColorValue label='rgb' value={rgbCss} />\n                        <CopyColorValue label='lab' value={labCss} />\n                        <CopyColorValue label='lch' value={lchCss} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PaletteColor","import React from 'react'\nimport PaletteColor from '../palette-color'\nimport { usePaletteColors } from '../../hooks/use-palette-colors'\n\nconst style = {\n    palette: 'w-1/3 min-w-min sm:w-auto flex flex-col sm:flex-grow self-stretch overflow-hidden rounded-3xl'\n}\n\nconst Palette: React.FC = () => {\n    const paletteColors = usePaletteColors()\n\n    return (\n        <div className={style.palette}>\n            {paletteColors.map((color, index) =>\n                <PaletteColor\n                    key={index}\n                    color={color}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default Palette","import React, { useReducer } from 'react'\nimport Footer from './components/footer'\nimport Header from './components/header'\nimport { initialState as lantanaInitialState, lantanaReducer } from './state/lantana/reducer'\nimport { initialState as colorBrewerInitialState, colorBrewerReducer } from './state/color-brewer/reducer'\nimport { initialState as globalInitialState, globalReducer } from './state/global/reducer'\nimport { LantanaContext } from './state/lantana/context'\nimport { ColorBrewerContext } from './state/color-brewer/context'\nimport ColorBrewer from './settings/ColorBrewer'\nimport Lantana from './settings/Lantana'\nimport { GlobalContext } from './state/global/context'\nimport { SettingsName } from './types'\nimport Palette from './components/palette'\n\nconst style = {\n    root: 'max-w-screen-2xl min-h-full m-auto flex flex-col content-stretch',\n    content: 'flex flex-1 items-start justify-between p-3 gap-6 sm:gap-10',\n    settings: 'md:max-w-xl flex-1 flex flex-col gap-6'\n}\n\nconst App: React.FC = () => {\n    const [lantanaState, lantanaDispatch] = useReducer(lantanaReducer, lantanaInitialState)\n    const [colorBrewerState, colorBrewerDispatch] = useReducer(colorBrewerReducer, colorBrewerInitialState)\n    const [globalState, globalDispatch] = useReducer(globalReducer, globalInitialState)\n\n    return (\n        <GlobalContext.Provider value={{ globalState: globalState, dispatch: globalDispatch }}>\n            <LantanaContext.Provider value={{ lantanaState: lantanaState, dispatch: lantanaDispatch }}>\n                <ColorBrewerContext.Provider value={{ colorBrewerState: colorBrewerState, dispatch: colorBrewerDispatch }}>\n                    <div className={style.root}>\n                        <Header />\n\n                        <div className={style.content}>\n                            <div className={style.settings}>\n                                {globalState.currentSettings === SettingsName.Lantana && <Lantana />}\n                                {globalState.currentSettings === SettingsName.ColorBrewer && <ColorBrewer />}\n                            </div>\n\n                            <Palette />\n                        </div>\n\n                        <Footer />\n                    </div>\n                </ColorBrewerContext.Provider>\n            </LantanaContext.Provider>\n        </GlobalContext.Provider>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode >,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}