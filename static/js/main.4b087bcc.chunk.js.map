{"version":3,"sources":["types/index.ts","components/footer/index.tsx","state/persist.ts","state/color-brewer/index.ts","state/cubehelix/index.ts","state/lantana/index.ts","state/global/index.ts","components/base/radio-input/index.tsx","components/tab-link/index.tsx","components/logo/index.tsx","components/header/index.tsx","utils/color.ts","components/palette-color/index.tsx","components/palette/index.tsx","hooks/use-in-view.ts","components/base/button/index.tsx","components/base/card/index.tsx","components/base/card-content/index.tsx","components/base/card-title/index.tsx","components/card-actions/index.tsx","utils/number.ts","components/base/input/index.tsx","components/base/number-input/index.tsx","components/base/range-input/index.tsx","components/base/large-control/index.tsx","components/color-picker/index.tsx","components/settings/lantana/index.tsx","components/base/color-stack/index.tsx","utils/color-brewer-groups.ts","components/settings/color-brewer/index.tsx","components/settings/cubehelix/index.tsx","components/card-start/index.tsx","App.tsx","index.tsx"],"names":["SettingsName","Footer","className","persistAtom","recoilPersist","persistedAtom","options","atom","effects_UNSTABLE","size","key","default","groupName","paletteName","paletteNameColors","chroma","scale","colors","colorBrewerColors","selector","get","start","rotations","gamma","dark","light","cubehelixScale","cubehelix","lightness","cubehelixColors","colorPickers","id","nanoid","hex","hsl","mode","colorPickersColors","map","picker","lantanaColors","currentSettings","Lantana","paletteColors","ColorBrewer","Cubehelix","paletteColorsString","JSON","stringify","color","paletteColorsCssGradient","toString","Radio","props","children","value","restProps","type","clsx","htmlFor","TabLink","settings","useRecoilState","globalCurrentSettings","setCurrentSettings","checked","onChange","e","target","LantanaLogo","useRecoilValue","index","style","length","Header","colorToPercentageHsl","h","s","l","Math","round","isNaN","percentageHslToColor","isLightColor","threshold","luminance","PaletteColor","label","substring","toUpperCase","useState","isCopied","setIsCopied","backgroundColor","onClick","copy","onAnimationEnd","Palette","ref","useRef","isVisible","setIsVisible","callback","entries","entry","isIntersecting","useEffect","current","observer","IntersectionObserver","observe","disconnect","useInView","triggerRef","isVisibleTrigger","Button","materialIconName","Card","CardContent","CardTitle","title","CardActions","colorsString","colorsCssGradient","toPrecision","precision","scaleFactor","Input","NumberInput","large","min","max","step","onChangeValue","inputValue","setInputValue","focus","setFocus","setParsedValue","parsedValue","parseFloat","onBlur","onFocus","onWheel","newValue","deltaY","RangeInput","LargeControl","minValue","maxValue","ColorPicker","onChangeColor","setHex","hue","setHue","saturation","setSaturation","setLightness","replace","test","isValidHex","newColor","newHue","newSaturation","newLightness","lantanaSize","setSize","lantanaGamma","setGamma","lantanaMode","setMode","lantanaColorPickers","setColorPickers","handleChangeMode","updatedColorPicker","availableMode","ColorStack","colorBrewerGroups","colorBrewerSize","colorBrewerGroupName","setGroupName","colorBrewerPaletteName","setPaletteName","handleChangeGroupName","handleChangePaletteName","availableGroupName","availablePaletteName","cubehelixSize","cubehelixStart","setStart","cubehelixRotations","setRotations","cubehelixGamma","cubehelixDark","setDark","cubehelixLight","setLight","CardStart","isOpen","setIsOpen","CurrentSettings","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b087bcc.chunk.js","sourcesContent":["import { brewer, InterpolationMode } from 'chroma-js'\n\nexport interface Picker {\n    id: string\n    hex: string\n}\n\nexport interface Palette {\n    size: number\n    mode: InterpolationMode\n    gamma: number\n}\n\nexport enum SettingsName {\n    Lantana = 'lantana',\n    ColorBrewer = 'colorbrewer',\n    Cubehelix = 'cubehelix'\n}\n\nexport type ColorBrewerGroupName = 'diverging' | 'qualitative' | 'sequential'\n\nexport type ColorBrewerPaletteName = keyof typeof brewer\n","import { FC } from 'react'\nimport './footer.css'\n\nconst Footer: FC = () => {\n    return (\n        <footer className='footer'>\n\n        </footer>\n    )\n}\n\nexport default Footer\n","import { atom, AtomOptions, RecoilState } from 'recoil'\nimport { recoilPersist } from 'recoil-persist'\n\nconst { persistAtom } = recoilPersist()\n\ninterface PersistedAtomOptions<T> extends AtomOptions<T> { }\n\nexport function persistedAtom<T>(options: PersistedAtomOptions<T>): RecoilState<T> {\n    return atom<T>({\n        ...options,\n        effects_UNSTABLE: [...(options.effects_UNSTABLE ? options.effects_UNSTABLE : []), persistAtom]\n    })\n}\n","import chroma from 'chroma-js'\nimport { Color } from 'chroma-js'\nimport { selector } from 'recoil'\nimport { persistedAtom as atom } from '../persist'\nimport { ColorBrewerGroupName, ColorBrewerPaletteName } from '../../types'\n\nexport const size = atom<number>({\n    key: 'colorBrewerSize',\n    default: 9,\n})\n\nexport const groupName = atom<ColorBrewerGroupName>({\n    key: 'colorBrewerStart',\n    default: 'sequential'\n})\n\nexport const paletteName = atom<ColorBrewerPaletteName>({\n    key: 'colorBrewerPaletteName',\n    default: 'PuRd'\n})\n\nexport const paletteNameColors = (size: number, paletteName: ColorBrewerPaletteName) => {\n    return chroma\n        .scale(paletteName)\n        .colors(size, null)\n}\n\nexport const colorBrewerColors = selector<Color[]>({\n    key: 'colorBrewerColors',\n    get: ({ get }) => {\n        return chroma\n            .scale(get(paletteName))\n            .colors(get(size), null)\n    }\n})\n","import chroma, { Color } from 'chroma-js'\nimport { Scale } from 'chroma-js'\nimport { selector } from 'recoil'\nimport { persistedAtom as atom} from '../persist'\n\nexport const size = atom<number>({\n    key: 'cubehelixSize',\n    default: 9\n})\n\nexport const start = atom<number>({\n    key: 'cubehelixStart',\n    default: 300\n})\n\nexport const rotations = atom<number>({\n    key: 'cubehelixRotations',\n    default: -0.4\n})\n\nexport const hue = atom<number>({\n    key: 'cubehelixHue',\n    default: 1\n})\n\nexport const gamma = atom<number>({\n    key: 'cubehelixGamma',\n    default: 1\n})\n\nexport const dark = atom<number>({\n    key: 'cubehelixDark',\n    default: 0.1\n})\n\nexport const light = atom<number>({\n    key: 'cubehelixLight',\n    default: 0.9\n})\n\nconst cubehelixScale = selector<Scale>({\n    key: 'cubehelixScale',\n    get: ({ get }) => {\n        return chroma\n            .cubehelix()\n            .start(get(start))\n            .rotations(get(rotations))\n            .gamma(get(gamma))\n            .lightness([get(dark), get(light)])\n            .scale()\n    }\n})\n\nexport const cubehelixColors = selector<Color[]>({\n    key: 'cubehelixColors',\n    get: ({ get }) => {\n        return get(cubehelixScale).colors(get(size), null)\n    }\n})\n","import chroma, { Color, InterpolationMode } from 'chroma-js'\nimport { nanoid } from 'nanoid'\nimport { selector } from 'recoil'\nimport { persistedAtom as atom} from '../persist'\nimport { Picker } from '../../types'\n\nexport const colorPickers = atom<Picker[]>({\n    key: 'lantanaColorPickers',\n    default: [\n        {\n            id: nanoid(),\n            hex: chroma.hsl(358, 1, 0.92).hex()\n        },\n        {\n            id: nanoid(),\n            hex: chroma.hsl(238, 1, 0.10).hex()\n        },\n    ]\n})\n\nexport const mode = atom<InterpolationMode>({\n    key: 'lantanaMode',\n    default: 'hsl'\n})\n\nexport const size = atom<number>({\n    key: 'lantanaSize',\n    default: 9\n})\n\nexport const gamma = atom<number>({\n    key: 'lantanaGamma',\n    default: 1\n})\n\nexport const colorPickersColors = selector<Color[]>({\n    key: 'lantanaColorPickersColors',\n    get: ({ get }) => {\n        return get(colorPickers).map(picker => chroma(picker.hex))\n    }\n})\n\nexport const lantanaColors = selector<Color[]>({\n    key: 'lantanaColors',\n    get: ({ get }) => {\n        return chroma\n            .scale(get(colorPickersColors))\n            .mode(get(mode))\n            .gamma(get(gamma))\n            .colors(get(size), null)\n    }\n})\n","import { Color } from 'chroma-js'\nimport { selector } from 'recoil'\nimport { persistedAtom as atom} from '../persist'\nimport { SettingsName } from '../../types'\nimport { colorBrewerColors } from '../color-brewer'\nimport { cubehelixColors } from '../cubehelix'\nimport { lantanaColors } from '../lantana'\n\nexport const currentSettings = atom<SettingsName>({\n    key: 'globalCurrentSettings',\n    default: SettingsName.Lantana\n})\n\nexport const paletteColors = selector<Color[]>({\n    key: 'globalPaletteColors',\n    get: ({ get }) => {\n        switch (get(currentSettings)) {\n            case SettingsName.Lantana:\n                return get(lantanaColors)\n            case SettingsName.ColorBrewer:\n                return get(colorBrewerColors)\n            case SettingsName.Cubehelix:\n                return get(cubehelixColors)\n            default:\n                return []\n        }\n    }\n})\n\nexport const paletteColorsString = selector<string>({\n    key: 'globalPaletteColorsString',\n    get: ({ get }) => {\n        return JSON.stringify(get(paletteColors).map(color => color.hex()))\n    }\n})\n\nexport const paletteColorsCssGradient = selector<string>({\n    key: 'globalPaletteColorsCssGradient',\n    get: ({ get }) => {\n        return `linear-gradient(to right, ${get(paletteColors).toString()})`\n    }\n})\n","import clsx from 'clsx'\nimport React, { FC, InputHTMLAttributes } from 'react'\nimport './radio-input.css'\n\nexport interface RadioProps extends InputHTMLAttributes<HTMLInputElement> {\n    children?: React.ReactNode | string\n}\n\nconst Radio: FC<RadioProps> = (props: RadioProps) => {\n    const { className, id, children, value, ...restProps } = props\n\n    return (\n        <>\n            <input\n                {...restProps}\n                id={id}\n                type='radio'\n                value={value}\n                className={clsx('radio-input')}\n            />\n            <label\n                htmlFor={id}\n                className={clsx('radio-label', className)}\n            >\n                {children ? children : value}\n            </label>\n        </>\n    )\n}\n\nexport default Radio\n","import React, { ChangeEvent, FC } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { currentSettings as globalCurrentSettings } from '../../state/global'\nimport { SettingsName } from '../../types'\nimport Radio from '../base/radio-input'\nimport './tab-link.css'\n\nexport interface TabLinkProps {\n    settings: SettingsName\n    children: React.ReactNode\n}\n\nconst TabLink: FC<TabLinkProps> = (props: TabLinkProps) => {\n    const { settings, children } = props\n\n    const [currentSettings, setCurrentSettings] = useRecoilState(globalCurrentSettings)\n    const checked = currentSettings === settings\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const settings = e.target.value\n\n        setCurrentSettings(settings as SettingsName)\n    }\n\n    return (\n        <Radio\n            id={settings}\n            className='tab-link'\n            value={settings}\n            checked={checked}\n            onChange={handleChange}\n        >\n            {children}\n        </Radio>\n    )\n}\n\nexport default TabLink\n","import { FC } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { colorPickersColors } from '../../state/lantana'\nimport './logo.css'\n\nconst LantanaLogo: FC = () => {\n    const colors = useRecoilValue(colorPickersColors)\n\n    return (\n        <>\n            <span className='logo'>lantana</span>\n\n            {colors.map((color, index) =>\n                <div key={index} className='flex items-center'>\n                    <span\n                        className='logo'\n                        style={{ color: color.hex() }}\n                    >\n                        •\n                    </span>\n                    {index + 1 !== colors.length &&\n                        <span className='logo'>\n                            {'->'}\n                        </span>\n                    }\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default LantanaLogo","import { FC } from 'react'\nimport { SettingsName } from '../../types'\nimport TabLink from '../tab-link'\nimport LantanaLogo from '../logo'\nimport './header.css'\n\nconst Header: FC = () => {\n    return (\n        <header className='header'>\n            <div className='header__tabs'>\n                <TabLink settings={SettingsName.Lantana}>\n                    <LantanaLogo />\n                </TabLink>\n\n                <TabLink settings={SettingsName.Cubehelix}>\n                    {SettingsName.Cubehelix}\n                </TabLink>\n\n                <TabLink settings={SettingsName.ColorBrewer}>\n                    {SettingsName.ColorBrewer}\n                </TabLink>\n            </div>\n        </header>\n    )\n}\n\nexport default Header\n","import chroma, { Color } from 'chroma-js'\n\nexport const isValidHex = (hex: string) => {\n    if (hex.substring(0, 1) === '#') {\n        hex = hex.substring(1)\n    }\n\n    switch (hex.length) {\n        case 3:\n            return /^[0-9A-F]{3}$/i.test(hex)\n        case 6:\n            return /^[0-9A-F]{6}$/i.test(hex)\n        case 8:\n            return /^[0-9A-F]{8}$/i.test(hex)\n        default:\n            return false\n    }\n}\n\nexport const formatHexString = (string: string) => {\n    return string\n        .replace(/[^0-9A-F]/ig, '')\n        .substring(0, 6)\n}\n\nexport const colorToPercentageHsl = (color: Color) => {\n    const [h, s, l] = color.hsl()\n\n    return [\n        Math.round(isNaN(h) ? 0 : h),\n        Math.round(s * 100),\n        Math.round(l * 100)\n    ]\n}\n\nexport const percentageHslToColor = (h: number, s: number, l: number) => {\n    return chroma.hsl(h, s / 100, l / 100)\n}\n\nexport const isLightColor = (color: Color, threshold: number = 0.5) => {\n    return color.luminance() > threshold\n}","import { Color } from 'chroma-js'\nimport clsx from 'clsx'\nimport copy from 'copy-to-clipboard'\nimport { FC, useState } from 'react'\nimport { isLightColor } from '../../utils/color'\nimport './palette-color.css'\n\nexport interface PaletteColorProps {\n    color: Color\n}\n\nconst PaletteColor: FC<PaletteColorProps> = (props: PaletteColorProps) => {\n    const { color } = props\n\n    const label = color.hex().substring(1).toUpperCase()\n\n    const [isCopied, setIsCopied] = useState(false)\n\n    const handleClick = () => {\n        copy(label)\n\n        setIsCopied(true)\n    }\n\n    return (\n        <div\n            className='palette-color group'\n            style={{ backgroundColor: color.hex() }}\n        >\n            <div\n                className={clsx(\n                    'palette-color__content',\n                    isCopied && 'palette-color__content--copied'\n                )}\n                onClick={handleClick}\n                onAnimationEnd={() => setIsCopied(false)}\n            >\n                <span className={clsx(\n                    'palette-color__label',\n                    isLightColor(color) ? 'palette-color__label--dark' : 'palette-color__label--light'\n                )}\n                >\n                    {isCopied ? 'Copy!' : label}\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default PaletteColor","import clsx from 'clsx'\nimport { FC } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { useInView } from '../../hooks/use-in-view'\nimport { paletteColors } from '../../state/global'\nimport PaletteColor from '../palette-color'\nimport './palette.css'\n\nconst Palette: FC = () => {\n    const colors = useRecoilValue(paletteColors)\n\n    const [triggerRef, isVisibleTrigger] = useInView<HTMLDivElement>({\n        threshold: 1.0\n    })\n\n    return (\n        <>\n            <div ref={triggerRef} />\n            <div className={clsx('palette', !isVisibleTrigger && 'palette--sticky')}>\n                {colors.map((color, index) =>\n                    <PaletteColor\n                        key={index}\n                        color={color}\n                    />\n                )}\n            </div>\n        </>\n    )\n}\n\nexport default Palette\n","import { RefObject, useEffect, useRef, useState } from 'react'\n\nexport function useInView<T extends Element>(options: IntersectionObserverInit): [RefObject<T>, boolean] {\n    const ref = useRef<T>(null)\n    \n    const [isVisible, setIsVisible] = useState<boolean>(false)\n\n    const callback = (entries: IntersectionObserverEntry[]) => {\n        const [entry] = entries\n\n        setIsVisible(entry.isIntersecting)\n    }\n\n    useEffect(() => {\n        const target = ref.current\n        const observer = new IntersectionObserver(callback, options)\n\n        if (target) {\n            observer.observe(target)\n        }\n\n        return () => {\n            if (target) {\n                observer.disconnect()\n            }\n        }\n    }, [ref, options])\n\n    return [ref, isVisible]\n}\n","import clsx from 'clsx'\nimport { ButtonHTMLAttributes, FC } from 'react'\nimport './button.css'\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    materialIconName?: string\n    label?: string\n}\n\nconst Button: FC<ButtonProps> = (props) => {\n    const { materialIconName, label, className, ...restProps } = props\n\n    return (\n        <button\n            {...restProps}\n            className={clsx('button', className, (materialIconName && !label) && 'button--action')}\n        >\n            {materialIconName &&\n                <span className='button__icon material-icons material-icons-round'>\n                    {materialIconName}\n                </span>\n            }\n            {label &&\n                <span>\n                    {label}\n                </span>\n            }\n        </button>\n    )\n}\n\nexport default Button","import clsx from 'clsx'\nimport React, { FC, HTMLAttributes } from 'react'\nimport './card.css'\n\nexport interface CardProps extends HTMLAttributes<HTMLDivElement> {\n    className?: string\n    children: React.ReactNode\n}\n\nconst Card: FC<CardProps> = (props: CardProps) => {\n    const { className, children, ...restProps } = props\n\n    return (\n        <div\n            {...restProps}\n            className={clsx('card', className)}\n        >\n            {children}\n        </div>\n    )\n}\n\nexport default Card\n","import clsx from 'clsx'\nimport { FC, ReactNode } from 'react'\nimport './card-content.css'\n\nexport interface CardContentProps {\n    className?: string\n    children?: ReactNode\n}\n\nconst CardContent: FC<CardContentProps> = (props) => {\n    const { children, className } = props\n\n    return (\n        <div className={clsx('card-content', className)}>\n            {children}\n        </div>\n    )\n}\n\nexport default CardContent\n","import clsx from 'clsx'\nimport { FC } from 'react'\nimport './card-title.css'\n\nexport interface CardTitleProps {\n    className?: string\n    title: string\n}\n\nconst CardTitle: FC<CardTitleProps> = (props) => {\n    const { title, className } = props\n\n    return (\n        <label className={clsx('card-title', className)}>\n            {title}\n        </label>\n    )\n}\n\nexport default CardTitle\n","import copy from 'copy-to-clipboard'\nimport { FC } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { paletteColorsCssGradient, paletteColorsString } from '../../state/global'\nimport Button from '../base/button'\nimport Card from '../base/card'\nimport CardContent from '../base/card-content'\nimport CardTitle from '../base/card-title'\nimport './card-actions.css'\n\nconst CardActions: FC = () => {\n    const colorsString = useRecoilValue(paletteColorsString)\n    const colorsCssGradient = useRecoilValue(paletteColorsCssGradient)\n\n    const handleClickCopyJsonArray = () => {\n        copy(colorsString)\n    }\n\n    const handleClickCopyCssGradient = () => {\n        copy(colorsCssGradient)\n    }\n    \n    return (\n        <Card>\n            <CardTitle title='copy actions' />\n            <CardContent className='action-content'>\n                <Button className='action-content__button' materialIconName='data_array' label='array' onClick={handleClickCopyJsonArray} />\n                <Button className='action-content__button' materialIconName='gradient' label='css gradient' onClick={handleClickCopyCssGradient} />\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default CardActions\n","export const toPrecision = (value: number, precision: number) => {\n    const scaleFactor = 10 ** precision\n    \n    return Math.round(value * scaleFactor) / scaleFactor\n}","import clsx from 'clsx'\nimport { FC, InputHTMLAttributes } from 'react'\nimport './input.css'\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n\n}\n\nconst Input: FC<InputProps> = (props) => {\n    const { className, ...restProps } = props\n    \n    return (\n        <input {...restProps} className={clsx('input', className)} />\n    )\n}\n\nexport default Input\n","import clsx from 'clsx'\nimport { ChangeEvent, FC, InputHTMLAttributes, useEffect, useState, WheelEvent } from 'react'\nimport { toPrecision } from '../../../utils/number'\nimport Input from '../input'\nimport './number-input.css'\n\nexport interface NumberInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    large?: boolean\n    value: number\n    min: number\n    max: number\n    step: number\n    precision: number\n    onChangeValue: (value: number) => void\n}\n\nconst NumberInput: FC<NumberInputProps> = (props: NumberInputProps) => {\n    const { className, large = false, value, min, max, step, precision, onChangeValue, ...restProps } = props\n\n    const [inputValue, setInputValue] = useState<string>(value.toString())\n    const [focus, setFocus] = useState<boolean>(false)\n\n    useEffect(() => {\n        setInputValue(value.toString())\n    }, [value])\n\n    const setParsedValue = (parsedValue: number) => {\n        if (!isNaN(parsedValue)) {\n            parsedValue = toPrecision(parsedValue, precision)\n            \n            if (parsedValue > max) {\n                onChangeValue(max)\n            }\n\n            if (parsedValue < min) {\n                onChangeValue(min)\n            }\n\n            if (parsedValue >= min && parsedValue <= max) {\n                onChangeValue(parsedValue)\n            }\n        } else {\n            setInputValue('')\n        }\n    }\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        setParsedValue(parsedValue)\n    }\n\n    const handleWheel = (e: WheelEvent<HTMLInputElement>) => {\n        if (focus) {\n            const newValue = e.deltaY > 0 ? value + step : value - step\n\n            setParsedValue(toPrecision(newValue, precision))\n        }\n    }\n\n    const handleBlur = () => {\n        setFocus(false)\n\n        const parsedValue = parseFloat(inputValue)\n\n        if (isNaN(parsedValue)) {\n            setInputValue(value.toString())\n        }\n    }\n\n    const handleFocus = () => {\n        setFocus(true)\n    }\n\n\n    return (\n        <Input\n            {...restProps}\n            className={clsx('number-input', large && 'number-input--lg', className)}\n            type='number'\n            min={min}\n            max={max}\n            step={step}\n            size={1}\n            value={inputValue}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            onFocus={handleFocus}\n            onWheel={handleWheel}\n        />\n    )\n}\n\nexport default NumberInput\n","import clsx from 'clsx'\nimport { FC, InputHTMLAttributes } from 'react'\nimport Input from '../input'\nimport './range-input.css'\n\nexport interface RangeInputProps extends InputHTMLAttributes<HTMLInputElement> {\n\n}\n\nconst RangeInput: FC<RangeInputProps> = (props: RangeInputProps) => {\n    const { className, ...restProps } = props\n\n    return (\n        <Input\n            {...restProps}\n            className={clsx('range-input', className)}\n            type='range'\n        />\n    )\n}\n\nexport default RangeInput\n","import { ChangeEvent, FC } from 'react'\nimport NumberInput from '../number-input'\nimport RangeInput from '../range-input'\nimport './large-control.css'\n\nexport interface LargeControlProps {\n    title: string\n    value: number\n    minValue: number\n    maxValue: number\n    step: number\n    precision: number\n    onChange: (value: number) => void\n}\n\nconst LargeControl: FC<LargeControlProps> = (props: LargeControlProps) => {\n    const { title, value, minValue, maxValue, step, precision, onChange } = props\n\n    const handleChangeRangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        onChange(parsedValue)\n    }\n\n    return (\n        <div className='large-control'>\n            <div className='large-control__content'>\n                <label className='large-control__content-label'>\n                    {title}\n                </label>\n                <NumberInput\n                    className='large-control__content-input'\n                    value={value}\n                    min={minValue}\n                    max={maxValue}\n                    step={step}\n                    precision={precision}\n                    onChangeValue={onChange}\n                />\n            </div>\n            <RangeInput\n                value={value}\n                min={minValue}\n                max={maxValue}\n                step={step}\n                onChange={handleChangeRangeInput}\n            />\n        </div>\n    )\n}\n\nexport default LargeControl\n","import { ChangeEvent, FC, useState } from 'react'\nimport chroma, { Color } from 'chroma-js'\nimport { colorToPercentageHsl, formatHexString, isValidHex, percentageHslToColor } from '../../utils/color'\nimport LargeControl from '../base/large-control'\nimport Input from '../base/input'\nimport './color-picker.css'\nimport Card from '../base/card'\nimport CardContent from '../base/card-content'\n\nexport interface ColorPickerProps {\n    color: Color\n    onChangeColor: (color: Color) => void\n}\n\nconst ColorPicker: FC<ColorPickerProps> = (props: ColorPickerProps) => {\n    const { color, onChangeColor } = props\n\n    const [h, s, l] = colorToPercentageHsl(color)\n\n    const [hex, setHex] = useState<string>(color.hex().substring(1))\n    const [hue, setHue] = useState<number>(h)\n    const [saturation, setSaturation] = useState<number>(s)\n    const [lightness, setLightness] = useState<number>(l)\n\n    const handleChangeHex = (e: ChangeEvent<HTMLInputElement>) => {\n        const hex = formatHexString(e.target.value)\n        setHex(hex)\n\n        if (isValidHex(hex)) {\n            const newColor = chroma(hex)\n            const [newHue, newSaturation, newLightness] = colorToPercentageHsl(newColor)\n\n            setHue(newHue)\n            setSaturation(newSaturation)\n            setLightness(newLightness)\n\n            onChangeColor(newColor)\n        }\n    }\n\n    const handleChangeHue = (newHue: number) => {\n        setHue(newHue)\n\n        const newColor = percentageHslToColor(newHue, saturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeSaturation = (newSaturation: number) => {\n        setSaturation(newSaturation)\n\n        const newColor = percentageHslToColor(hue, newSaturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeLightness = (newLightness: number) => {\n        setLightness(newLightness)\n\n        const newColor = percentageHslToColor(hue, saturation, newLightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n\n    return (\n        <Card className='color-picker'>\n            <Input\n                className='color-picker__title'\n                size={6}\n                value={hex}\n                onChange={handleChangeHex}\n            />\n            <CardContent className='color-picker__controls'>\n                <LargeControl\n                    title='hue'\n                    value={hue}\n                    minValue={0}\n                    maxValue={360}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeHue}\n                />\n                <LargeControl\n                    title='saturation'\n                    value={saturation}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeSaturation}\n                />\n                <LargeControl\n                    title='lightness'\n                    value={lightness}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeLightness}\n                />\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default ColorPicker\n","import { ChangeEvent, FC } from 'react'\nimport { Color, InterpolationMode } from 'chroma-js'\nimport ColorPicker from '../../color-picker'\nimport Radio from '../../base/radio-input'\nimport NumberInput from '../../base/number-input'\nimport Card from '../../base/card'\nimport CardTitle from '../../base/card-title'\nimport CardContent from '../../base/card-content'\nimport { useRecoilState } from 'recoil'\nimport { size as lantanaSize } from '../../../state/lantana'\nimport { gamma as lantanaGamma } from '../../../state/lantana'\nimport { mode as lantanaMode } from '../../../state/lantana'\nimport { colorPickers as lantanaColorPickers } from '../../../state/lantana'\nimport chroma from 'chroma-js'\n\nconst Lantana: FC = () => {\n    const availableModes: Array<InterpolationMode> = ['rgb', 'lrgb', 'hsl', 'hcl', 'hsi', 'lab', 'lch']\n\n    const [size, setSize] = useRecoilState(lantanaSize)\n    const [gamma, setGamma] = useRecoilState(lantanaGamma)\n    const [mode, setMode] = useRecoilState(lantanaMode)\n    const [colorPickers, setColorPickers] = useRecoilState(lantanaColorPickers)\n\n    const handleChangeColor = (id: string) => (color: Color) => {\n        const updatedColorPicker = {\n            id,\n            hex: color.hex()\n        }\n\n        setColorPickers(colorPickers.map(picker =>\n            picker.id === id ?\n                { ...picker, ...updatedColorPicker } :\n                picker\n        ))\n    }\n\n    const handleChangeSize = (size: number) => {\n        setSize(size)\n    }\n\n    const handleChangeMode = (e: ChangeEvent<HTMLInputElement>) => {\n        const mode = e.target.value\n\n        setMode(mode as InterpolationMode)\n    }\n\n    const handleChangeGamma = (gamma: number) => {\n        setGamma(gamma)\n    }\n\n    return (\n        <div className='grid sm:grid-cols-2 lg:grid-cols-4 gap-4'>\n            {colorPickers.map(picker =>\n                <ColorPicker\n                    key={picker.id}\n                    color={chroma(picker.hex)}\n                    onChangeColor={handleChangeColor(picker.id)}\n                />\n            )}\n\n            <div className='grid sm:grid-cols-2 lg:grid-cols-1 sm:col-span-2 lg:col-span-2 gap-4'>\n                <Card>\n                    <CardTitle title='interpolation mode' />\n                    <CardContent>\n                        {availableModes.map(availableMode =>\n                            <Radio\n                                key={availableMode}\n                                id={availableMode}\n                                value={availableMode}\n                                checked={availableMode === mode}\n                                onChange={handleChangeMode}\n                            >\n                                {availableMode}\n                            </Radio>\n                        )}\n                    </CardContent>\n                </Card>\n\n                <div className='grid md:grid-cols-2 gap-4'>\n                    <Card>\n                        <CardTitle title='number of colors' />\n                        <CardContent>\n                            <NumberInput\n                                large\n                                value={size}\n                                min={0}\n                                max={30}\n                                step={1}\n                                precision={0}\n                                onChangeValue={handleChangeSize}\n                            />\n                        </CardContent>\n                    </Card>\n\n                    <Card>\n                        <CardTitle title='center shift' />\n                        <CardContent>\n                            <NumberInput\n                                large\n                                value={gamma}\n                                min={0}\n                                max={5}\n                                step={0.1}\n                                precision={1}\n                                onChangeValue={handleChangeGamma}\n                            />\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Lantana\n","import { Color } from 'chroma-js'\nimport { FC } from 'react'\nimport './color-stack.css'\n\nexport interface ColorStackProps {\n    colors: Color[]\n}\n\nconst ColorStack: FC<ColorStackProps> = (props: ColorStackProps) => {\n    const { colors } = props\n\n    return (\n        <div className='color-stack'>\n            {colors.map((color) =>\n                <div\n                    key={color.hex()}\n                    className='color-stack__circle'\n                    style={{ backgroundColor: color.hex() }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ColorStack\n","import { brewer } from 'chroma-js'\n\nexport const colorBrewerGroups = {\n    'diverging': [\n        'Spectral',\n        'RdYlGn',\n        'RdBu',\n        'PiYG',\n        'PRGn',\n        'RdYlBu',\n        'BrBG',\n        'RdGy',\n        'PuOr'\n    ] as Array<keyof typeof brewer>,\n    'qualitative': [\n        'Set2',\n        'Accent',\n        'Set1',\n        'Set3',\n        'Dark2',\n        'Paired',\n        'Pastel2',\n        'Pastel1',\n    ] as Array<keyof typeof brewer>,\n    'sequential': [\n        'OrRd',\n        'PuBu',\n        'BuPu',\n        'Oranges',\n        'BuGn',\n        'YlOrBr',\n        'YlGn',\n        'Reds',\n        'RdPu',\n        'Greens',\n        'YlGnBu',\n        'Purples',\n        'GnBu',\n        'Greys',\n        'YlOrRd',\n        'PuRd',\n        'Blues',\n        'PuBuGn',\n    ] as Array<keyof typeof brewer>\n}","import { ChangeEvent, FC } from 'react'\nimport { useRecoilState } from 'recoil'\nimport Card from '../../base/card'\nimport CardContent from '../../base/card-content'\nimport CardTitle from '../../base/card-title'\nimport ColorStack from '../../base/color-stack'\nimport NumberInput from '../../base/number-input'\nimport Radio from '../../base/radio-input'\nimport { ColorBrewerGroupName, ColorBrewerPaletteName } from '../../../types'\nimport { colorBrewerGroups } from '../../../utils/color-brewer-groups'\nimport { paletteNameColors, size as colorBrewerSize} from '../../../state/color-brewer'\nimport { groupName as colorBrewerGroupName} from '../../../state/color-brewer'\nimport { paletteName as colorBrewerPaletteName} from '../../../state/color-brewer'\n\nconst ColorBrewer: FC = () => {\n    const [size, setSize] = useRecoilState(colorBrewerSize)\n    const [groupName, setGroupName] = useRecoilState(colorBrewerGroupName)\n    const [paletteName, setPaletteName] = useRecoilState(colorBrewerPaletteName)\n\n    const availableGroupNames: Array<ColorBrewerGroupName> = ['sequential', 'diverging', 'qualitative']\n\n    const handleChangePaletteSize = (size: number) => {\n        setSize(size)\n    }\n\n    const handleChangeGroupName = (e: ChangeEvent<HTMLInputElement>) => {\n        const groupName = e.target.value\n\n        setGroupName(groupName as ColorBrewerGroupName)\n    }\n\n\n    const handleChangePaletteName = (e: ChangeEvent<HTMLInputElement>) => {\n        const paletteName = e.target.value\n\n        setPaletteName(paletteName as ColorBrewerPaletteName)\n    }\n\n    return (\n        <div className='grid md:grid-cols-7 gap-4'>\n            <div className='grid sm:grid-cols-5 md:grid-cols-1 md:col-span-3 gap-4'>\n                <Card className='sm:col-span-3 md:col-span-1'>\n                    <CardTitle title='nature of data' />\n                    <CardContent>\n                        {availableGroupNames.map(availableGroupName =>\n                            <Radio\n                                key={availableGroupName}\n                                id={availableGroupName}\n                                value={availableGroupName}\n                                checked={availableGroupName === groupName}\n                                onChange={handleChangeGroupName}\n                            >\n                                {availableGroupName}\n                            </Radio>\n                        )}\n                    </CardContent>\n                </Card>\n\n                <Card className='sm:col-span-2 md:col-span-1'>\n                    <CardTitle title='number of colors' />\n                    <CardContent>\n                        <NumberInput\n                            large\n                            value={size}\n                            min={0}\n                            max={30}\n                            step={1}\n                            precision={0}\n                            onChangeValue={handleChangePaletteSize}\n                        />\n                    </CardContent>\n                </Card>\n            </div>\n\n            <Card className='md:col-span-4'>\n                <CardTitle title='color scheme' />\n                <CardContent>\n                    {colorBrewerGroups[groupName].map(availablePaletteName =>\n                        <Radio\n                            key={availablePaletteName}\n                            id={availablePaletteName}\n                            value={availablePaletteName}\n                            checked={availablePaletteName === paletteName}\n                            onChange={handleChangePaletteName}\n                        >\n                            <ColorStack colors={paletteNameColors(5, availablePaletteName)} />\n                        </Radio>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default ColorBrewer\n","import { FC } from 'react'\nimport NumberInput from '../../base/number-input'\nimport LargeControl from '../../base/large-control'\nimport Card from '../../base/card'\nimport CardContent from '../../base/card-content'\nimport CardTitle from '../../base/card-title'\nimport { useRecoilState } from 'recoil'\nimport { size as cubehelixSize } from '../../../state/cubehelix'\nimport { start as cubehelixStart } from '../../../state/cubehelix'\nimport { rotations as cubehelixRotations } from '../../../state/cubehelix'\nimport { gamma as cubehelixGamma } from '../../../state/cubehelix'\nimport { dark as cubehelixDark} from '../../../state/cubehelix'\nimport { light as cubehelixLight } from '../../../state/cubehelix'\n\nconst Cubehelix: FC = () => {\n    const [size, setSize] = useRecoilState(cubehelixSize)\n    const [start, setStart] = useRecoilState(cubehelixStart)\n    const [rotations, setRotations] = useRecoilState(cubehelixRotations)\n    const [gamma, setGamma] = useRecoilState(cubehelixGamma)\n    const [dark, setDark] = useRecoilState(cubehelixDark)\n    const [light, setLight] = useRecoilState(cubehelixLight)\n\n    const handleChangePaletteSize = (size: number) => {\n        setSize(size)\n    }\n\n    const handleChangeStart = (start: number) => {\n        setStart(start)\n    }\n\n    const handleChangeRotations = (rotations: number) => {\n        setRotations(rotations)\n    }\n\n    const handleChangeDark = (dark: number) => {\n        setDark(dark)\n    }\n\n    const handleChangeLight = (light: number) => {\n        setLight(light)\n    }\n\n    const handleChangeGamma = (gamma: number) => {\n        setGamma(gamma)\n    }\n\n    return (\n        <div className='grid md:grid-cols-2 gap-4'>\n            <Card>\n                <CardContent className='flex-col content-stretch gap-4 sm:gap-5'>\n                    <LargeControl\n                        title='start'\n                        value={start}\n                        minValue={0}\n                        maxValue={360}\n                        step={1}\n                        precision={0}\n                        onChange={handleChangeStart}\n                    />\n\n                    <LargeControl\n                        title='rotations'\n                        value={rotations}\n                        minValue={-2}\n                        maxValue={2}\n                        step={0.01}\n                        precision={2}\n                        onChange={handleChangeRotations}\n                    />\n\n                    <LargeControl\n                        title='gamma'\n                        value={gamma}\n                        minValue={0}\n                        maxValue={1}\n                        step={0.01}\n                        precision={2}\n                        onChange={handleChangeGamma}\n                    />\n                </CardContent>\n            </Card>\n\n            <div className='grid sm:grid-cols-2 md:grid-cols-1 gap-4'>\n                <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                    <Card>\n                        <CardContent>\n                            <LargeControl\n                                title='dark'\n                                value={dark}\n                                minValue={0}\n                                maxValue={1}\n                                step={0.01}\n                                precision={2}\n                                onChange={handleChangeDark}\n                            />\n                        </CardContent>\n                    </Card>\n\n                    <Card>\n                        <CardContent>\n                            <LargeControl\n                                title='light'\n                                value={light}\n                                minValue={0}\n                                maxValue={1}\n                                step={0.01}\n                                precision={2}\n                                onChange={handleChangeLight}\n                            />\n                        </CardContent>\n                    </Card>\n                </div>\n\n                <Card>\n                    <CardTitle title='number of colors' />\n                    <CardContent>\n                        <NumberInput\n                            large\n                            value={size}\n                            min={0}\n                            max={30}\n                            step={1}\n                            precision={0}\n                            onChangeValue={handleChangePaletteSize}\n                        />\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default Cubehelix\n","import clsx from 'clsx'\nimport { FC, useState } from 'react'\nimport Card from '../base/card'\nimport CardContent from '../base/card-content'\nimport './card-start.css'\n\nconst CardStart: FC = () => {\n    const [isOpen, setIsOpen] = useState(true)\n\n    const handleClick = () => {\n        setIsOpen(false)\n    }\n\n    return (\n        <div\n            className={clsx(\n                'card-start-wrapper group',\n                isOpen ? 'card-start-wrapper--open' : 'card-start-wrapper--close'\n            )}\n        >\n            <Card\n                className='card-start'\n                onClick={handleClick}\n            >\n                <CardContent className='card-start__content'>\n                    <span className='card-start__content-icon material-icons material-icons-round'>\n                        done\n                    </span>\n                    <label className='card-start__content-label'>\n                        Create color&nbsp;combinations for use in data&nbsp;visualization and information&nbsp;design.\n                    </label>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default CardStart\n","import { FC } from 'react'\nimport Footer from './components/footer'\nimport Header from './components/header'\nimport { SettingsName } from './types'\nimport Palette from './components/palette'\nimport { RecoilRoot, useRecoilValue } from 'recoil'\nimport { currentSettings } from './state/global'\nimport CardActions from './components/card-actions'\nimport Lantana from './components/settings/lantana'\nimport ColorBrewer from './components/settings/color-brewer'\nimport Cubehelix from './components/settings/cubehelix'\nimport CardStart from './components/card-start'\n\nconst CurrentSettings: FC = () => {\n    const settings = useRecoilValue(currentSettings)\n\n    return (\n        <>\n            {settings === SettingsName.Lantana && <Lantana />}\n            {settings === SettingsName.ColorBrewer && <ColorBrewer />}\n            {settings === SettingsName.Cubehelix && <Cubehelix />}\n        </>\n    )\n}\n\nconst App: FC = () => {\n    return (\n        <RecoilRoot>\n\n            <div className='max-w-screen-xl m-auto pt-3 sm:pt-6 flex flex-col transition-all content-stretch'>\n                <CardStart />\n                <Header />\n\n                <div className='flex flex-1 flex-col gap-4 pb-4 px-3 sm:px-6'>\n                    <Palette />\n                    <CardActions />\n                    <CurrentSettings />\n                </div>\n\n                <Footer />\n            </div>\n        </RecoilRoot>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode >,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}