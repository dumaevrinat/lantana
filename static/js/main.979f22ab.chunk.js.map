{"version":3,"sources":["types/index.ts","state/color-brewer/actions.ts","components/footer/index.tsx","state/global/actions.ts","state/color-brewer/reducer.ts","state/color-brewer/context.ts","state/lantana/actions.ts","state/global/reducer.ts","state/global/context.ts","state/global/selectors.ts","state/cubehelix/actions.ts","state/lantana/reducer.ts","state/lantana/context.ts","state/lantana/selectors.ts","state/cubehelix/selectors.ts","state/color-brewer/selectors.ts","state/cubehelix/reducer.ts","state/cubehelix/context.ts","hooks/use-palette-colors.ts","components/radio/index.tsx","components/tab-link/index.tsx","components/logo/LantanaLogo.tsx","components/header/index.tsx","components/color-stack/index.tsx","components/number-input/index.tsx","utils/number.ts","components/card/index.tsx","components/settings-item/index.tsx","utils/color-brewer-groups.ts","settings/ColorBrewer.tsx","utils/color.ts","components/large-control/index.tsx","components/color-picker/index.tsx","settings/Lantana.tsx","components/palette-color/index.tsx","components/palette/index.tsx","settings/Cubehelix.tsx","App.tsx","index.tsx"],"names":["SettingsName","ActionType","Footer","initialState","name","ColorBrewer","paletteSize","groupName","paletteName","colorBrewerReducer","state","action","type","SetPaletteSize","payload","SetGroupName","SetPaletteName","ColorBrewerContext","React","createContext","colorBrewerState","dispatch","currentSettings","Lantana","globalReducer","SetCurrentSettings","GlobalContext","globalState","selectCurrentSettings","initialFirstColor","chroma","hsl","initialSecondColor","colorPickers","id","nanoid","color","palette","mode","size","gamma","lantanaReducer","AddColorPicker","UpdateColorPicker","map","picker","DeleteColorPicker","filter","SetPalette","SetPaletteMode","SetGamma","LantanaContext","lantanaState","selectPaletteSize","selectPaletteMode","selectGamma","selectColorsFromColorPickers","selectStart","start","selectRotations","rotations","selectDark","dark","selectLight","light","paletteColorsScale","cubehelix","lightness","scale","selectGroupName","selectPaletteName","Cubehelix","hue","cubehelixReducer","SetStart","SetRotations","SetHue","SetDark","SetLight","CubehelixContext","cubehelixState","usePaletteColors","useContext","colors","selectColorBrewerColors","selectCubehelixColors","style","Radio","className","children","value","checked","onChange","clsx","radio","htmlFor","label","TabLink","description","settings","e","target","setCurrentSettings","LantanaLogo","index","hex","length","Header","paletteColors","onClick","copy","JSON","stringify","ColorStack","backgroundColor","NumberInput","minValue","maxValue","step","precision","useState","toString","inputValue","setInputValue","focus","setFocus","useEffect","setParsedValue","parsedValue","isNaN","inputWrapper","input","min","max","parseFloat","onBlur","onFocus","onWheel","newValue","deltaY","scaleFactor","Math","round","toPrecision","Card","SettingsItem","colorBrewerGroups","handleChangeGroupName","setGroupName","handleChangePaletteName","setPaletteName","setPaletteSize","colorToPercentageHsl","h","s","l","percentageHslToColor","isLightColor","threshold","luminance","LargeControl","title","ColorPicker","onChangeColor","substring","setHex","setHue","saturation","setSaturation","setLightness","replace","test","isValidHex","newColor","newHue","newSaturation","newLightness","pickers","handleChangeColor","colorPicker","handleChangePaletteMode","setPaletteMode","setGamma","PaletteColor","toUpperCase","isCopied","setIsCopied","onAnimationEnd","Palette","setStart","setRotations","setDark","setLight","App","useReducer","lantanaInitialState","lantanaDispatch","colorBrewerInitialState","colorBrewerDispatch","cubehelixInitialState","cubehelixDispatch","globalInitialState","globalDispatch","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.979f22ab.chunk.js","sourcesContent":["import { brewer, Color, InterpolationMode } from 'chroma-js'\n\nexport interface Picker {\n    id: string\n    color: Color\n}\n\nexport interface Palette {\n    size: number\n    mode: InterpolationMode\n    gamma: number\n}\n\nexport interface SettingsState {\n    name: SettingsName\n}\n\nexport interface LantanaState extends SettingsState {\n    name: SettingsName.Lantana\n    colorPickers: Picker[]\n    palette: Palette\n}\n\nexport interface ColorBrewerState extends SettingsState {\n    name: SettingsName.ColorBrewer\n    paletteSize: number\n    groupName: ColorBrewerGroupName\n    paletteName: keyof typeof brewer\n}\n\nexport interface CubehelixState extends SettingsState {\n    name: SettingsName.Cubehelix\n    paletteSize: number\n    start: number\n    rotations: number\n    hue: number\n    gamma: number\n    dark: number\n    light: number\n}\n\nexport interface GlobalState {\n    currentSettings: SettingsName\n}\n\nexport enum SettingsName {\n    Lantana = 'lantana',\n    ColorBrewer = 'colorbrewer',\n    Cubehelix = 'cubehelix'\n}\n\nexport type ColorBrewerGroupName = 'diverging' | 'qualitative' | 'sequential'\n","import { brewer } from 'chroma-js'\nimport { ColorBrewerGroupName } from '../../types'\n\nexport enum ActionType {\n    SetPaletteSize,\n    SetGroupName,\n    SetPaletteName\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport interface SetGroupName {\n    type: ActionType.SetGroupName,\n    payload: ColorBrewerGroupName\n} \n\nexport interface SetPaletteName {\n    type: ActionType.SetPaletteName,\n    payload: keyof typeof brewer\n} \n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\nexport const setGroupName = (groupName: ColorBrewerGroupName): SetGroupName => ({\n    type: ActionType.SetGroupName,\n    payload: groupName\n})\n\nexport const setPaletteName = (paletteName: keyof typeof brewer): SetPaletteName => ({\n    type: ActionType.SetPaletteName,\n    payload: paletteName\n})\n\nexport type Actions = SetPaletteSize | SetGroupName | SetPaletteName\n","import React from 'react'\n\nconst Footer: React.FC = () => {\n    return (\n        <footer>\n\n        </footer>\n    )\n}\n\nexport default Footer","import { SettingsName } from '../../types'\n\nexport enum ActionType {\n    SetCurrentSettings\n}\n\nexport interface SetCurrentSettings {\n    type: ActionType.SetCurrentSettings,\n    payload: SettingsName\n}\n\nexport const setCurrentSettings= (settings: SettingsName): SetCurrentSettings => ({\n    type: ActionType.SetCurrentSettings,\n    payload: settings\n})\n\nexport type Actions = SetCurrentSettings\n","import { ColorBrewerState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialPaletteSize = 9\nconst initialGroupName = 'sequential'\nconst initialPaletteName = 'PuRd'\n\nexport const initialState: ColorBrewerState = {\n    name: SettingsName.ColorBrewer,\n    paletteSize: initialPaletteSize,\n    groupName: initialGroupName,\n    paletteName: initialPaletteName\n}\n\nexport const colorBrewerReducer = (state: ColorBrewerState, action: Actions): ColorBrewerState => {\n    switch (action.type) {\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                paletteSize: action.payload\n            }\n        case ActionType.SetGroupName:\n            return {\n                ...state,\n                groupName: action.payload\n            }\n        case ActionType.SetPaletteName:\n            return {\n                ...state,\n                paletteName: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { ColorBrewerState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const ColorBrewerContext = React.createContext<{\n    colorBrewerState: ColorBrewerState\n    dispatch: React.Dispatch<Actions>\n}>({\n    colorBrewerState: initialState,\n    dispatch: () => undefined\n})","import { InterpolationMode } from 'chroma-js'\nimport { Picker, Palette } from '../../types'\n\nexport enum ActionType {\n    AddColorPicker,\n    UpdateColorPicker,\n    DeleteColorPicker,\n    SetPalette,\n    SetPaletteMode,\n    SetPaletteSize,\n    SetGamma\n}\n\nexport interface AddColorPicker {\n    type: ActionType.AddColorPicker,\n    payload: Picker\n}\n\nexport interface UpdateColorPicker {\n    type: ActionType.UpdateColorPicker,\n    payload: Picker\n}\n\nexport interface DeleteColorPicker {\n    type: ActionType.DeleteColorPicker,\n    payload: string\n}\n\nexport interface SetPalette {\n    type: ActionType.SetPalette,\n    payload: Palette\n}\n\nexport interface SetPaletteMode {\n    type: ActionType.SetPaletteMode,\n    payload: InterpolationMode\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport interface SetGamma {\n    type: ActionType.SetGamma,\n    payload: number\n}\n\nexport const addColorPicker = (colorPicker: Picker): AddColorPicker => ({\n    type: ActionType.AddColorPicker,\n    payload: colorPicker\n})\n\nexport const updateColorPicker = (colorPicker: Picker): UpdateColorPicker => ({\n    type: ActionType.UpdateColorPicker,\n    payload: colorPicker\n})\n\nexport const deleteColorPicker = (id: string): DeleteColorPicker => ({\n    type: ActionType.DeleteColorPicker,\n    payload: id\n})\n\nexport const setPalette = (palette: Palette): SetPalette => ({\n    type: ActionType.SetPalette,\n    payload: palette\n})\n\nexport const setPaletteMode = (mode: InterpolationMode): SetPaletteMode => ({\n    type: ActionType.SetPaletteMode,\n    payload: mode\n})\n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\nexport const setGamma = (gamma: number): SetGamma => ({\n    type: ActionType.SetGamma,\n    payload: gamma\n})\n\n\nexport type Actions = AddColorPicker\n    | UpdateColorPicker\n    | DeleteColorPicker\n    | SetPalette\n    | SetPaletteMode\n    | SetPaletteSize\n    | SetGamma\n","import { GlobalState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialCurrentSettings = SettingsName.Lantana\n\nexport const initialState: GlobalState = {\n    currentSettings: initialCurrentSettings\n}\n\nexport const globalReducer = (state: GlobalState, action: Actions): GlobalState => {\n    switch (action.type) {\n        case ActionType.SetCurrentSettings:\n            return {\n                ...state,\n                currentSettings: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { GlobalState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const GlobalContext = React.createContext<{\n    globalState: GlobalState\n    dispatch: React.Dispatch<Actions>\n}>({\n    globalState: initialState,\n    dispatch: () => undefined\n})","import { GlobalState, SettingsName } from '../../types'\n\nexport const selectCurrentSettings = (state: GlobalState): SettingsName => state.currentSettings\n","export enum ActionType {\n    SetStart,\n    SetRotations,\n    SetHue,\n    SetGamma,\n    SetDark,\n    SetLight,\n    SetPaletteSize\n}\n\nexport interface SetStart {\n    type: ActionType.SetStart,\n    payload: number\n}\n\nexport interface SetRotations {\n    type: ActionType.SetRotations,\n    payload: number\n}\n\nexport interface SetHue {\n    type: ActionType.SetHue,\n    payload: number\n}\n\nexport interface SetGamma {\n    type: ActionType.SetGamma,\n    payload: number\n}\n\nexport interface SetDark {\n    type: ActionType.SetDark,\n    payload: number\n}\n\nexport interface SetLight {\n    type: ActionType.SetLight,\n    payload: number\n}\n\nexport interface SetPaletteSize {\n    type: ActionType.SetPaletteSize,\n    payload: number\n}\n\nexport const setStart = (start: number): SetStart => ({\n    type: ActionType.SetStart,\n    payload: start\n})\n\nexport const setRotations = (rotations: number): SetRotations => ({\n    type: ActionType.SetRotations,\n    payload: rotations\n})\n\nexport const setHue = (hue: number): SetHue => ({\n    type: ActionType.SetHue,\n    payload: hue\n})\n\nexport const setGamma = (gamma: number): SetGamma => ({\n    type: ActionType.SetGamma,\n    payload: gamma\n})\n\nexport const setDark = (dark: number): SetDark => ({\n    type: ActionType.SetDark,\n    payload: dark\n})\n\nexport const setLight = (light: number): SetLight => ({\n    type: ActionType.SetLight,\n    payload: light\n})\n\nexport const setPaletteSize = (size: number): SetPaletteSize => ({\n    type: ActionType.SetPaletteSize,\n    payload: size\n})\n\n\nexport type Actions = SetStart\n    | SetRotations\n    | SetHue\n    | SetGamma\n    | SetDark\n    | SetLight\n    | SetPaletteSize\n","import chroma from 'chroma-js'\nimport { nanoid } from 'nanoid'\nimport { LantanaState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialFirstColor = chroma.hsl(358, 1, 0.92)\nconst initialSecondColor = chroma.hsl(238, 1, 0.10)\nconst initialPaletteSize = 9\nconst initialPaletteMode = 'hsi'\nconst initialGamma = 1\n\n\nexport const initialState: LantanaState = {\n    name: SettingsName.Lantana,\n    colorPickers: [\n        {\n            id: nanoid(),\n            color: initialFirstColor\n        },\n        {\n            id: nanoid(),\n            color: initialSecondColor\n        },\n    ],\n    palette: {\n        mode: initialPaletteMode,\n        size: initialPaletteSize,\n        gamma: initialGamma\n    }\n}\n\nexport const lantanaReducer = (state: LantanaState, action: Actions): LantanaState => {\n    switch (action.type) {\n        case ActionType.AddColorPicker:\n            return {\n                ...state,\n                colorPickers: [...state.colorPickers, action.payload]\n            }\n        case ActionType.UpdateColorPicker:\n            return {\n                ...state,\n                colorPickers: state.colorPickers.map(picker =>\n                    picker.id === action.payload.id ? { ...picker, ...action.payload } : picker\n                )\n            }\n        case ActionType.DeleteColorPicker:\n            return {\n                ...state,\n                colorPickers: state.colorPickers.filter(picker => picker.id !== action.payload)\n            }\n        case ActionType.SetPalette:\n            return {\n                ...state,\n                palette: action.payload\n            }\n        case ActionType.SetPaletteMode:\n            return {\n                ...state,\n                palette: { ...state.palette, mode: action.payload }\n            }\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                palette: { ...state.palette, size: action.payload }\n            }\n        case ActionType.SetGamma:\n            return {\n                ...state,\n                palette: { ...state.palette, gamma: action.payload }\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { LantanaState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const LantanaContext = React.createContext<{\n    lantanaState: LantanaState\n    dispatch: React.Dispatch<Actions>\n}>({\n    lantanaState: initialState,\n    dispatch: () => undefined\n})","import chroma, { Color, InterpolationMode } from 'chroma-js'\nimport { LantanaState, Palette, Picker } from '../../types'\n\n\nexport const selectPalette = (state: LantanaState): Palette => state.palette\nexport const selectPaletteSize = (state: LantanaState): number => state.palette.size\nexport const selectPaletteMode = (state: LantanaState): InterpolationMode => state.palette.mode\nexport const selectGamma = (state: LantanaState): number => state.palette.gamma\n\nexport const selectColorPickers = (state: LantanaState): Picker[] => state.colorPickers\n\nexport const selectColorsFromColorPickers = (state: LantanaState): Color[] => state.colorPickers.map(picker => picker.color)\n\nexport const selectPaletteColors = (state: LantanaState): Color[] => {\n    return chroma\n        .scale(selectColorsFromColorPickers(state))\n        .mode(selectPaletteMode(state))\n        .gamma(selectGamma(state))\n        .colors(selectPaletteSize(state), null)\n}\n","import chroma, { Color, Scale } from 'chroma-js'\nimport { CubehelixState } from '../../types'\n\nexport const selectStart = (state: CubehelixState): number => state.start\nexport const selectRotations = (state: CubehelixState): number => state.rotations\nexport const selectHue = (state: CubehelixState): number => state.hue\nexport const selectGamma = (state: CubehelixState): number => state.gamma\nexport const selectDark = (state: CubehelixState): number => state.dark\nexport const selectLight = (state: CubehelixState): number => state.light\nexport const selectPaletteSize = (state: CubehelixState): number => state.paletteSize\n\nconst paletteColorsScale = (state: CubehelixState): Scale => {\n    return chroma\n        .cubehelix()\n        .start(selectStart(state))\n        .rotations(selectRotations(state))\n        .gamma(selectGamma(state))\n        .lightness([selectDark(state), selectLight(state)])\n        .scale()\n}\n\nexport const selectPaletteColors = (state: CubehelixState): Color[] => {\n    return paletteColorsScale(state).colors(selectPaletteSize(state), null)\n}\n\nexport const selectLogoColors = (state: CubehelixState): Color[] => {\n    return paletteColorsScale(state).colors(2, null)\n}\n","import chroma, { brewer, Color } from 'chroma-js'\nimport { ColorBrewerGroupName, ColorBrewerState } from '../../types'\n\nexport const selectPaletteSize = (state: ColorBrewerState): number => state.paletteSize\nexport const selectGroupName = (state: ColorBrewerState): ColorBrewerGroupName => state.groupName\nexport const selectPaletteName = (state: ColorBrewerState): keyof typeof brewer => state.paletteName\n\nexport const selectPaletteColors = (state: ColorBrewerState): Color[] => {\n    return chroma\n        .scale(selectPaletteName(state))\n        .colors(selectPaletteSize(state), null)\n}\n","import { CubehelixState, SettingsName } from '../../types'\nimport { ActionType, Actions } from './actions'\n\nconst initialStart = 300\nconst initialRotations = -0.4\nconst initialHue = 1\nconst initialGamma = 1\nconst initialDark = 0.1\nconst initialLight = 0.9\nconst initialPaletteSize = 9\n\nexport const initialState: CubehelixState = {\n    name: SettingsName.Cubehelix,\n    paletteSize: initialPaletteSize,\n    start: initialStart,\n    rotations: initialRotations,\n    hue: initialHue,\n    gamma: initialGamma,\n    dark: initialDark,\n    light: initialLight\n}\n\nexport const cubehelixReducer = (state: CubehelixState, action: Actions): CubehelixState => {\n    switch (action.type) {\n        case ActionType.SetStart:\n            return {\n                ...state,\n                start: action.payload\n            }\n        case ActionType.SetRotations:\n            return {\n                ...state,\n                rotations: action.payload\n            }\n        case ActionType.SetHue:\n            return {\n                ...state,\n                hue: action.payload\n            }\n        case ActionType.SetGamma:\n            return {\n                ...state,\n                gamma: action.payload\n            }\n        case ActionType.SetDark:\n            return {\n                ...state,\n                dark: action.payload\n            }\n        case ActionType.SetLight:\n            return {\n                ...state,\n                light: action.payload\n            }\n        case ActionType.SetPaletteSize:\n            return {\n                ...state,\n                paletteSize: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { CubehelixState } from '../../types'\nimport { Actions } from './actions'\nimport { initialState } from './reducer'\n\nexport const CubehelixContext = React.createContext<{\n    cubehelixState: CubehelixState\n    dispatch: React.Dispatch<Actions>\n}>({\n    cubehelixState: initialState,\n    dispatch: () => undefined\n})\n","import { useContext } from 'react'\nimport { ColorBrewerContext } from '../state/color-brewer/context'\nimport { GlobalContext } from '../state/global/context'\nimport { selectCurrentSettings } from '../state/global/selectors'\nimport { LantanaContext } from '../state/lantana/context'\nimport { SettingsName } from '../types'\nimport { selectPaletteColors as selectLantanaColors } from '../state/lantana/selectors'\nimport { selectPaletteColors as selectCubehelixColors } from '../state/cubehelix/selectors'\nimport { selectPaletteColors as selectColorBrewerColors } from '../state/color-brewer/selectors'\nimport { CubehelixContext } from '../state/cubehelix/context'\n\nexport const usePaletteColors = () => {\n    const { globalState } = useContext(GlobalContext)\n    const { lantanaState } = useContext(LantanaContext)\n    const { cubehelixState } = useContext(CubehelixContext)\n    const { colorBrewerState } = useContext(ColorBrewerContext)\n\n    switch (selectCurrentSettings(globalState)) {\n        case SettingsName.Lantana:\n            return selectLantanaColors(lantanaState)\n        case SettingsName.ColorBrewer:\n            return selectColorBrewerColors(colorBrewerState)\n        case SettingsName.Cubehelix:\n            return selectCubehelixColors(cubehelixState)\n        default:\n            return []\n    }\n}\n","import clsx from 'clsx'\nimport React from 'react'\n\ninterface ClassNameProps {\n    radio?: string\n    label?: string\n}\n\nexport interface RadioProps {\n    id: string\n    className?: ClassNameProps\n    value: string | number\n    checked: boolean\n    onChange: React.ChangeEventHandler<HTMLInputElement>\n    children?: React.ReactNode | string\n}\n\nconst style = {\n    radio: 'flex',\n    label: ''\n}\n\nconst Radio: React.FC<RadioProps> = ({ id, className, children, value, checked, onChange }) => {\n    return (\n        <div className={clsx(style.radio, className?.radio)}>\n            <input\n                id={id}\n                type='radio'\n                value={value}\n                checked={checked}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={id}\n                className={clsx(style.label, className?.label)}\n            >\n                {children ? children : value}\n            </label>\n        </div>\n    )\n}\n\nexport default Radio","import clsx from 'clsx'\nimport React, { ChangeEvent, useContext } from 'react'\nimport { setCurrentSettings } from '../../state/global/actions'\nimport { GlobalContext } from '../../state/global/context'\nimport { selectCurrentSettings } from '../../state/global/selectors'\nimport { SettingsName } from '../../types'\nimport Radio from '../radio'\n\nexport interface TabLinkProps {\n    settings: SettingsName\n    description?: string\n    children: React.ReactNode\n}\n\nconst style = {\n    tabLink: 'flex flex-col items-center max-w-min px-3 scroll-snap-align-start transition-all',\n    radioLabel: 'flex flex-nowrap items-center justify-center min-w-max text-3xl sm:text-4xl',\n    description: 'px-4 break-normal text-base cursor-default',\n}\n\nconst TabLink: React.FC<TabLinkProps> = ({ description, settings, children }) => {\n    const { globalState, dispatch } = useContext(GlobalContext)\n    \n    const checked = selectCurrentSettings(globalState) === settings\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const settings = e.target.value\n\n        dispatch(setCurrentSettings(settings as SettingsName))\n    }\n\n    return (\n        <div className={style.tabLink}>\n            <Radio\n                id={settings}\n                className={{ label: style.radioLabel }}\n                value={settings}\n                checked={checked}\n                onChange={handleChange}\n            >\n                {children}\n            </Radio>\n\n            {description &&\n                <div className={clsx(style.description, !checked && 'invisible')}>\n                    {description}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default TabLink\n","import React, { useContext } from 'react'\nimport { LantanaContext } from '../../state/lantana/context'\nimport { selectColorsFromColorPickers } from '../../state/lantana/selectors'\n\nconst LantanaLogo: React.FC = () => {\n    const { lantanaState } = useContext(LantanaContext)\n\n    const colors = selectColorsFromColorPickers(lantanaState)\n\n    return (\n        <>\n            <span>lantana</span>\n\n            {colors.map((color, index) =>\n                <div key={index} className='flex items-center'>\n                    <span style={{ color: color.hex() }}>•</span>\n                    {index + 1 !== colors.length && <span>{'->'}</span>}\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default LantanaLogo","import React from 'react'\nimport copy from 'copy-to-clipboard'\nimport { usePaletteColors } from '../../hooks/use-palette-colors'\nimport { SettingsName } from '../../types'\nimport TabLink from '../tab-link'\nimport LantanaLogo from '../logo/LantanaLogo'\n\nconst style = {\n    header: 'flex flex-nowrap justify-between gap-4 mb-6 mt-4 no-scrollbar overflow-x-scroll scroll-snap-x',\n    tabs: 'flex flex-nowrap',\n    actions: 'flex items-start min-w-max px-3 gap-4 scroll-snap-align-start'\n}\n\nconst Header: React.FC = () => {\n    const paletteColors = usePaletteColors()\n\n    const handleClickCopy = () => {\n        copy(JSON.stringify(paletteColors.map(color => color.hex())))\n    }\n\n    return (\n        <header className={style.header}>\n            <div className={style.tabs}>\n                <TabLink\n                    settings={SettingsName.Lantana}\n                    description='tool for creating color schemes'\n                >\n                    <LantanaLogo />\n                </TabLink>\n\n                <TabLink\n                    settings={SettingsName.Cubehelix}\n                    description='linearly-decreasing brightness'\n                >\n                    {SettingsName.Cubehelix}\n                </TabLink>\n\n                <TabLink\n                    settings={SettingsName.ColorBrewer}\n                    description='color schemes by Cynthia Brewer'\n                >\n                    {SettingsName.ColorBrewer}\n                </TabLink>\n            </div>\n\n            <div className={style.actions}>\n                <button onClick={handleClickCopy}>\n                    <span className='material-icons align-middle mr-2 md-18 material-icons-round'>\n                        content_copy\n                    </span>\n                    <span>\n                        copy all\n                    </span>\n                </button>\n            </div>\n        </header>\n    )\n}\n\nexport default Header","import { Color } from 'chroma-js'\nimport React from 'react'\n\nexport interface ColorStackProps {\n    colors: Color[]\n}\n\nconst style = {\n    stack: 'flex items-center py-1 px-0.5 box-content first:ml-1.0 last:-mr-2',\n    color: 'w-5 h-5 rounded-full -ml-2'\n}\n\nconst ColorStack: React.FC<ColorStackProps> = ({ colors }) => {\n    return (\n        <div className={style.stack}>\n            {colors.map((color, index) =>\n                <div\n                    key={color.hex()}\n                    className={style.color}\n                    style={{ backgroundColor: color.hex() }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ColorStack","import { ChangeEvent, useEffect, useState, WheelEvent } from 'react'\nimport { toPrecision } from '../../utils/number'\n\ninterface ClassNameProps {\n    inputWrapper?: string\n    input?: string\n}\n\nexport interface NumberInputProps {\n    className?: ClassNameProps\n    value: number\n    minValue: number\n    maxValue: number\n    step: number\n    precision: number\n    onChange: (value: number) => void\n}\n\nconst NumberInput: React.FC<NumberInputProps> = ({ className, value, minValue, maxValue, step, precision, onChange }) => {\n    const [inputValue, setInputValue] = useState<string>(value.toString())\n    const [focus, setFocus] = useState<boolean>(false)\n\n    useEffect(() => {\n        setInputValue(value.toString())\n    }, [value])\n\n    const setParsedValue = (parsedValue: number) => {\n        if (!isNaN(parsedValue)) {\n            if (parsedValue > maxValue) {\n                onChange(maxValue)\n            }\n\n            if (parsedValue < minValue) {\n                onChange(minValue)\n            }\n\n            if (parsedValue >= minValue && parsedValue <= maxValue) {\n                onChange(parsedValue)\n            }\n        } else {\n            setInputValue('')\n        }\n    }\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        setParsedValue(parsedValue)\n    }\n\n    const handleWheel = (e: WheelEvent<HTMLInputElement>) => {\n        if (focus) {\n            const newValue = e.deltaY > 0 ? value + step : value - step\n\n            setParsedValue(toPrecision(newValue, precision))\n        }\n    }\n\n    const handleBlur = () => {\n        setFocus(false)\n\n        const parsedValue = parseFloat(inputValue)\n\n        if (isNaN(parsedValue)) {\n            setInputValue(value.toString())\n        }\n    }\n\n    const handleFocus = () => {\n        setFocus(true)\n    }\n\n\n    return (\n        <div className={className?.inputWrapper}>\n            <input\n                className={className?.input}\n                type='number'\n                min={minValue}\n                max={maxValue}\n                step={step}\n                size={1}\n                value={inputValue}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                onWheel={handleWheel}\n            />\n        </div>\n    )\n}\n\nexport default NumberInput","export const toPrecision = (value: number, precision: number) => {\n    const scaleFactor = 10 ** precision\n    \n    return Math.round(value * scaleFactor) / scaleFactor\n}","import clsx from 'clsx'\nimport React from 'react'\n\nexport interface CardProps {\n    className?: string\n    children: React.ReactNode\n}\n\nconst style = {\n    card: 'border-2 border-gray-100 rounded-3xl p-4',\n}\n\nconst Card: React.FC<CardProps> = ({ className, children }) => {\n    return (\n        <div className={clsx(style.card, className)}>\n            {children}\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from '../card'\n\nexport interface SettingsItemProps {\n    label?: string,\n    children: React.ReactNode\n}\n\nconst style = {\n    card: 'flex flex-wrap items-center gap-2',\n    label: '',\n    content: 'flex flex-wrap flex-grow gap-2'\n}\n\nconst SettingsItem: React.FC<SettingsItemProps> = ({ label, children }) => {\n    return (\n        <Card className={style.card}>\n            {label &&\n                <label className={style.label}>\n                    {label}\n                </label>\n            }\n\n            <div className={style.content}>\n                {children}\n            </div>\n        </Card>\n    )\n}\n\nexport default SettingsItem","import { brewer } from 'chroma-js'\n\nexport const colorBrewerGroups = {\n    'diverging': [\n        'Spectral',\n        'RdYlGn',\n        'RdBu',\n        'PiYG',\n        'PRGn',\n        'RdYlBu',\n        'BrBG',\n        'RdGy',\n        'PuOr'\n    ] as Array<keyof typeof brewer>,\n    'qualitative': [\n        'Set2',\n        'Accent',\n        'Set1',\n        'Set3',\n        'Dark2',\n        'Paired',\n        'Pastel2',\n        'Pastel1',\n    ] as Array<keyof typeof brewer>,\n    'sequential': [\n        'OrRd',\n        'PuBu',\n        'BuPu',\n        'Oranges',\n        'BuGn',\n        'YlOrBr',\n        'YlGn',\n        'Reds',\n        'RdPu',\n        'Greens',\n        'YlGnBu',\n        'Purples',\n        'GnBu',\n        'Greys',\n        'YlOrRd',\n        'PuRd',\n        'Blues',\n        'PuBuGn',\n    ] as Array<keyof typeof brewer>\n}","import chroma from 'chroma-js'\nimport { brewer } from 'chroma-js'\nimport React, { ChangeEvent, useContext } from 'react'\nimport ColorStack from '../components/color-stack'\nimport NumberInput from '../components/number-input'\nimport Radio from '../components/radio'\nimport SettingsItem from '../components/settings-item'\nimport { setGroupName, setPaletteName, setPaletteSize } from '../state/color-brewer/actions'\nimport { ColorBrewerContext } from '../state/color-brewer/context'\nimport { selectGroupName, selectPaletteName, selectPaletteSize } from '../state/color-brewer/selectors'\nimport { ColorBrewerGroupName } from '../types'\nimport { colorBrewerGroups } from '../utils/color-brewer-groups'\n\nconst ColorBrewer: React.FC = () => {\n    const { colorBrewerState, dispatch } = useContext(ColorBrewerContext)\n\n    const groupNames: Array<ColorBrewerGroupName> = ['sequential', 'diverging', 'qualitative']\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangeGroupName = (e: ChangeEvent<HTMLInputElement>) => {\n        const groupName = e.target.value\n\n        dispatch(setGroupName(groupName as ColorBrewerGroupName))\n    }\n\n\n    const handleChangePaletteName = (e: ChangeEvent<HTMLInputElement>) => {\n        const paletteName = e.target.value\n\n        dispatch(setPaletteName(paletteName as keyof typeof brewer))\n    }\n\n    return (\n        <>\n            <SettingsItem label='nature of data'>\n                {groupNames.map(groupName =>\n                    <Radio\n                        key={groupName}\n                        id={groupName}\n                        value={groupName}\n                        checked={selectGroupName(colorBrewerState) === groupName}\n                        onChange={handleChangeGroupName}\n                    >\n                        {groupName}\n                    </Radio>\n                )}\n            </SettingsItem>\n\n            <SettingsItem label='color scheme'>\n                {colorBrewerGroups[selectGroupName(colorBrewerState)].map(paletteName =>\n                    <Radio\n                        key={paletteName}\n                        id={paletteName}\n                        value={paletteName}\n                        checked={selectPaletteName(colorBrewerState) === paletteName}\n                        onChange={handleChangePaletteName}\n                    >\n                        <ColorStack colors={chroma.scale(paletteName).colors(5, null)} />\n                    </Radio>\n                )}\n            </SettingsItem>\n\n            <SettingsItem label='number of colors'>\n                <NumberInput\n                    value={selectPaletteSize(colorBrewerState)}\n                    minValue={0}\n                    maxValue={30}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangePaletteSize}\n                />\n            </SettingsItem>\n        </>\n    )\n}\n\nexport default ColorBrewer\n","import chroma, { Color } from 'chroma-js'\n\nexport const isValidHex = (hex: string) => {\n    if (hex.substring(0, 1) === '#') {\n        hex = hex.substring(1)\n    }\n\n    switch (hex.length) {\n        case 3:\n            return /^[0-9A-F]{3}$/i.test(hex)\n        case 6:\n            return /^[0-9A-F]{6}$/i.test(hex)\n        case 8:\n            return /^[0-9A-F]{8}$/i.test(hex)\n        default:\n            return false\n    }\n}\n\nexport const formatHexString = (string: string) => {\n    return string\n        .replace(/[^0-9A-F]/ig, '')\n        .substring(0, 6)\n}\n\nexport const colorToPercentageHsl = (color: Color) => {\n    const [h, s, l] = color.hsl()\n\n    return [\n        Math.round(isNaN(h) ? 0 : h),\n        Math.round(s * 100),\n        Math.round(l * 100)\n    ]\n}\n\nexport const percentageHslToColor = (h: number, s: number, l: number) => {\n    return chroma.hsl(h, s / 100, l / 100)\n}\n\nexport const isLightColor = (color: Color, threshold: number = 0.5) => {\n    return color.luminance() > threshold\n}","import React, { ChangeEvent } from 'react'\nimport NumberInput from '../number-input'\n\nexport interface LargeControlProps {\n    title: string\n    value: number\n    minValue: number\n    maxValue: number\n    step: number\n    precision: number\n    onChange: (value: number) => void\n}\n\nconst style = {\n    control: 'flex flex-col gap-1',\n    label: 'flex-grow select-none mr-2',\n    numberInput: 'text-right'\n}\n\nconst LargeControl: React.FC<LargeControlProps> = ({ title, value, minValue, maxValue, step, precision, onChange }) => {\n    const handleChangeRangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        const parsedValue = parseFloat(e.target.value)\n\n        onChange(parsedValue)\n    }\n\n    return (\n        <div className={style.control}>\n            <div className='flex'>\n                <label className={style.label}>\n                    {title}\n                </label>\n                <NumberInput\n                    className={{ input: style.numberInput }}\n                    value={value}\n                    minValue={minValue}\n                    maxValue={maxValue}\n                    step={step}\n                    precision={precision}\n                    onChange={onChange}\n                />\n            </div>\n            <input\n                type='range'\n                value={value}\n                min={minValue}\n                max={maxValue}\n                step={step}\n                onChange={handleChangeRangeInput}\n            />\n        </div>\n    )\n}\n\nexport default LargeControl","import React, { ChangeEvent, useState } from 'react'\nimport chroma, { Color } from 'chroma-js'\nimport { colorToPercentageHsl, formatHexString, isValidHex, percentageHslToColor } from '../../utils/color'\nimport LargeControl from '../large-control'\nimport Card from '../card'\n\nexport interface ColorPickerProps {\n    color: Color\n    onChangeColor: (color: Color) => void\n}\n\nconst style = {\n    card: 'flex-1 flex-col items-start pb-6',\n    title: 'text-black transition-all ease-in-out mb-4',\n    titleInput: 'uppercase text-3xl font-semibold',\n    controls: 'flex flex-col gap-5 sm:gap-6 w-full'\n}\n\nconst ColorPicker: React.FC<ColorPickerProps> = ({ color, onChangeColor }) => {\n    const [h, s, l] = colorToPercentageHsl(color)\n\n    const [hex, setHex] = useState<string>(color.hex().substring(1))\n    const [hue, setHue] = useState<number>(h)\n    const [saturation, setSaturation] = useState<number>(s)\n    const [lightness, setLightness] = useState<number>(l)\n\n    const handleChangeHex = (e: ChangeEvent<HTMLInputElement>) => {\n        const hex = formatHexString(e.target.value)\n        setHex(hex)\n\n        if (isValidHex(hex)) {\n            const newColor = chroma(hex)\n            const [newHue, newSaturation, newLightness] = colorToPercentageHsl(newColor)\n\n            setHue(newHue)\n            setSaturation(newSaturation)\n            setLightness(newLightness)\n\n            onChangeColor(newColor)\n        }\n    }\n\n    const handleChangeHue = (newHue: number) => {\n        setHue(newHue)\n        \n        const newColor = percentageHslToColor(newHue, saturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeSaturation = (newSaturation: number) => {\n        setSaturation(newSaturation)\n\n        const newColor = percentageHslToColor(hue, newSaturation, lightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n    const handleChangeLightness = (newLightness: number) => {\n        setLightness(newLightness)\n\n        const newColor = percentageHslToColor(hue, saturation, newLightness)\n        setHex(newColor.hex().substring(1))\n        onChangeColor(newColor)\n    }\n\n\n    return (\n        <Card className={style.card}>\n            <div className={style.title}>\n                <input\n                    className={style.titleInput}\n                    type='text'\n                    size={6}\n                    value={hex}\n                    onChange={handleChangeHex}\n                />\n            </div>\n            <div className={style.controls}>\n                <LargeControl\n                    title='hue'\n                    value={hue}\n                    minValue={0}\n                    maxValue={360}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeHue}\n                />\n                <LargeControl\n                    title='saturation'\n                    value={saturation}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeSaturation}\n                />\n                <LargeControl\n                    title='lightness'\n                    value={lightness}\n                    minValue={0}\n                    maxValue={100}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeLightness}\n                />\n            </div>\n        </Card>\n    )\n}\n\nexport default ColorPicker","import React, { ChangeEvent, useContext } from 'react'\nimport { LantanaContext } from '../state/lantana/context'\nimport { selectColorPickers, selectGamma, selectPaletteMode, selectPaletteSize } from '../state/lantana/selectors'\nimport { setGamma, setPaletteMode, setPaletteSize, updateColorPicker } from '../state/lantana/actions'\nimport { Color, InterpolationMode } from 'chroma-js'\nimport ColorPicker from '../components/color-picker'\nimport Radio from '../components/radio'\nimport NumberInput from '../components/number-input'\nimport SettingsItem from '../components/settings-item'\n\nconst style = {\n    colorPickers: 'flex flex-col sm:flex-row gap-6',\n}\n\nconst Lantana: React.FC = () => {\n    const { lantanaState, dispatch } = useContext(LantanaContext)\n\n    const modes: Array<InterpolationMode> = ['rgb', 'lrgb', 'hsl', 'hcl', 'hsi', 'lab', 'lch']\n    const pickers = selectColorPickers(lantanaState)\n\n    const handleChangeColor = (id: string) => (color: Color) => {\n        const updatedColorPicker = { id, color }\n\n        dispatch(updateColorPicker(updatedColorPicker))\n    }\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangePaletteMode = (e: ChangeEvent<HTMLInputElement>) => {\n        const mode = e.target.value\n\n        dispatch(setPaletteMode(mode as InterpolationMode))\n    }\n\n    const handleChangeGamma = (gamma: number) => {\n        dispatch(setGamma(gamma))\n    }\n\n    return (\n        <>\n            <div className={style.colorPickers}>\n                {pickers.map(picker =>\n                    <ColorPicker\n                        key={picker.id}\n                        color={picker.color}\n                        onChangeColor={handleChangeColor(picker.id)}\n                    />\n                )}\n            </div>\n\n            <div className='flex flex-col gap-6'>\n                <SettingsItem label='interpolation mode'>\n                    {modes.map(mode =>\n                        <Radio\n                            key={mode}\n                            id={mode}\n                            value={mode}\n                            checked={selectPaletteMode(lantanaState) === mode}\n                            onChange={handleChangePaletteMode}\n                        >\n                            {mode}\n                        </Radio>\n                    )}\n                </SettingsItem>\n\n                <SettingsItem label='number of colors'>\n                    <NumberInput\n                        value={selectPaletteSize(lantanaState)}\n                        minValue={0}\n                        maxValue={30}\n                        step={1}\n                        precision={0}\n                        onChange={handleChangePaletteSize}\n                    />\n                </SettingsItem>\n\n                <SettingsItem label='center shift'>\n                    <NumberInput\n                        value={selectGamma(lantanaState)}\n                        minValue={0}\n                        maxValue={5}\n                        step={0.1}\n                        precision={1}\n                        onChange={handleChangeGamma}\n                    />\n                </SettingsItem>\n            </div>\n        </>\n    )\n}\n\nexport default Lantana\n","import { Color } from 'chroma-js'\nimport clsx from 'clsx'\nimport copy from 'copy-to-clipboard'\nimport React, { useState } from 'react'\nimport { isLightColor } from '../../utils/color'\n\nexport interface PaletteColorProps {\n    color: Color\n}\n\nconst style = {\n    paletteColor: 'group flex flex-grow items-stretch flex-basis-1 hover:flex-basis-44 h-44 overflow-hidden tap-highlight-transparent cursor-pointer transition-all ease-in-out',\n    content: 'flex flex-grow justify-center items-center opacity-0 group-hover:opacity-100 transition-all ease-in-out select-none',\n    label: 'font-bold md:text-2xl'\n}\n\nconst PaletteColor: React.FC<PaletteColorProps> = ({ color }) => {\n    const label = color.hex().substring(1).toUpperCase()\n\n    const [isCopied, setIsCopied] = useState(false)\n\n    const handleClick = () => {\n        copy(label)\n\n        setIsCopied(true)\n    }\n\n    return (\n        <div\n            className={style.paletteColor}\n            style={{ backgroundColor: color.hex() }}\n        >\n            <div\n                className={clsx(style.content, isCopied && 'animate-bounce-1')}\n                onClick={handleClick}\n                onAnimationEnd={() => setIsCopied(false)}\n            >\n                <span className={clsx(\n                    style.label,\n                    isLightColor(color) ? 'text-black' : 'text-white'\n                )}\n                >\n                    {isCopied ? 'Copy!' : label}\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default PaletteColor","import React from 'react'\nimport PaletteColor from '../palette-color'\nimport { usePaletteColors } from '../../hooks/use-palette-colors'\n\nconst style = {\n    palette: 'flex w-full overflow-hidden rounded-3xl'\n}\n\nconst Palette: React.FC = () => {\n    const paletteColors = usePaletteColors()\n\n    return (\n        <div className={style.palette}>\n            {paletteColors.map((color, index) =>\n                <PaletteColor\n                    key={index}\n                    color={color}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default Palette","import { useContext } from 'react'\nimport { CubehelixContext } from '../state/cubehelix/context'\nimport { setDark, setGamma, setLight, setPaletteSize, setRotations, setStart } from '../state/cubehelix/actions'\nimport SettingsItem from '../components/settings-item'\nimport NumberInput from '../components/number-input'\nimport { selectDark, selectGamma, selectLight, selectPaletteSize, selectRotations, selectStart } from '../state/cubehelix/selectors'\nimport LargeControl from '../components/large-control'\nimport Card from '../components/card'\n\nconst style = {\n    row: 'flex flex-col md:flex-row gap-6',\n    basicSettings: 'flex flex-col gap-5 sm:gap-6 pb-6'\n}\n\nconst Cubehelix: React.FC = () => {\n    const { cubehelixState, dispatch } = useContext(CubehelixContext)\n\n    const handleChangePaletteSize = (size: number) => {\n        dispatch(setPaletteSize(size))\n    }\n\n    const handleChangeStart = (start: number) => {\n        dispatch(setStart(start))\n    }\n\n    const handleChangeRotations = (rotations: number) => {\n        dispatch(setRotations(rotations))\n    }\n\n    const handleChangeDark = (dark: number) => {\n        dispatch(setDark(dark))\n    }\n\n    const handleChangeLight = (light: number) => {\n        dispatch(setLight(light))\n    }\n\n    const handleChangeGamma = (gamma: number) => {\n        dispatch(setGamma(gamma))\n    }\n\n    return (\n        <>\n            <Card className={style.basicSettings}>\n                <LargeControl\n                    title='start'\n                    value={selectStart(cubehelixState)}\n                    minValue={0}\n                    maxValue={360}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangeStart}\n                />\n\n                <LargeControl\n                    title='rotations'\n                    value={selectRotations(cubehelixState)}\n                    minValue={-2}\n                    maxValue={2}\n                    step={0.01}\n                    precision={2}\n                    onChange={handleChangeRotations}\n                />\n\n                <LargeControl\n                    title='gamma'\n                    value={selectGamma(cubehelixState)}\n                    minValue={0}\n                    maxValue={1}\n                    step={0.01}\n                    precision={2}\n                    onChange={handleChangeGamma}\n                />\n            </Card>\n\n            <div className={style.row}>\n                <Card className='flex-1 min-w-min'>\n                    <LargeControl\n                        title='dark'\n                        value={selectDark(cubehelixState)}\n                        minValue={0}\n                        maxValue={1}\n                        step={0.01}\n                        precision={2}\n                        onChange={handleChangeDark}\n                    />\n                </Card>\n\n                <Card className='flex-1 min-w-min'>\n                    <LargeControl\n                        title='light'\n                        value={selectLight(cubehelixState)}\n                        minValue={0}\n                        maxValue={1}\n                        step={0.01}\n                        precision={2}\n                        onChange={handleChangeLight}\n                    />\n                </Card>\n            </div>\n\n            <SettingsItem label='number of colors'>\n                <NumberInput\n                    value={selectPaletteSize(cubehelixState)}\n                    minValue={0}\n                    maxValue={30}\n                    step={1}\n                    precision={0}\n                    onChange={handleChangePaletteSize}\n                />\n            </SettingsItem>\n        </>\n    )\n}\n\nexport default Cubehelix\n","import React, { useReducer } from 'react'\nimport Footer from './components/footer'\nimport Header from './components/header'\nimport { initialState as lantanaInitialState, lantanaReducer } from './state/lantana/reducer'\nimport { initialState as cubehelixInitialState, cubehelixReducer } from './state/cubehelix/reducer'\nimport { initialState as colorBrewerInitialState, colorBrewerReducer } from './state/color-brewer/reducer'\nimport { initialState as globalInitialState, globalReducer } from './state/global/reducer'\nimport { LantanaContext } from './state/lantana/context'\nimport { ColorBrewerContext } from './state/color-brewer/context'\nimport { CubehelixContext } from './state/cubehelix/context'\nimport { GlobalContext } from './state/global/context'\nimport ColorBrewer from './settings/ColorBrewer'\nimport Lantana from './settings/Lantana'\nimport { SettingsName } from './types'\nimport Palette from './components/palette'\nimport Cubehelix from './settings/Cubehelix'\n\nconst style = {\n    root: 'max-w-screen-xl min-h-full m-auto flex flex-col content-stretch',\n    content: 'flex flex-1 flex-col p-3 gap-6',\n    settings: 'md:max-w-2xl flex flex-col gap-6'\n}\n\nconst App: React.FC = () => {\n    const [lantanaState, lantanaDispatch] = useReducer(lantanaReducer, lantanaInitialState)\n    const [colorBrewerState, colorBrewerDispatch] = useReducer(colorBrewerReducer, colorBrewerInitialState)\n    const [cubehelixState, cubehelixDispatch] = useReducer(cubehelixReducer, cubehelixInitialState)\n    const [globalState, globalDispatch] = useReducer(globalReducer, globalInitialState)\n\n    return (\n        <GlobalContext.Provider value={{ globalState: globalState, dispatch: globalDispatch }}>\n            <LantanaContext.Provider value={{ lantanaState: lantanaState, dispatch: lantanaDispatch }}>\n                <ColorBrewerContext.Provider value={{ colorBrewerState: colorBrewerState, dispatch: colorBrewerDispatch }}>\n                    <CubehelixContext.Provider value={{ cubehelixState: cubehelixState, dispatch: cubehelixDispatch }}>\n                        <div className={style.root}>\n                            <Header />\n\n                            <div className={style.content}>\n                                <Palette />\n\n                                <div className={style.settings}>\n                                    {globalState.currentSettings === SettingsName.Lantana && <Lantana />}\n                                    {globalState.currentSettings === SettingsName.ColorBrewer && <ColorBrewer />}\n                                    {globalState.currentSettings === SettingsName.Cubehelix && <Cubehelix />}\n                                </div>\n                            </div>\n\n                            <Footer />\n                        </div>\n                    </CubehelixContext.Provider>\n                </ColorBrewerContext.Provider>\n            </LantanaContext.Provider>\n        </GlobalContext.Provider>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode >,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}